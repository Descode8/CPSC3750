School Material
"Weekly Schedule:
                                Quizzes & Exams / Chapter Reading Quizzes / Programming Projects 
                                DUE DATE PATTERNS:
                                Chapter Reading Quizzes always due end of day Saturday
                                Programming Projects always due end of day Saturday
                                Quizzes & Exams due at various end of days"
"SAMS Source Code: I believe the strongest key to learning how to program is to learn how to read source code. Web programming is no different. I've selected the SAMS textbook for this course in part because all of the source code presented in the book is available online. If you have a different version of the textbook than I am using, you may have trouble finding the source code listings for assignments. I have uploaded ALL textbook source code to GitHub and provide a link in each chapter learning module to it. For example, for Chapter 8, here's the link - https://github.com/upstate-csci-450-master/chap08-javascript. Each chapter content presented in this section contains a link to the source code for the chapter. Hope this helps. It will IF you take advantage of it and study the source code. Reading code makes one better at writing code."
"Professor: Dan Wooster Email: edwoost@clemson.edu"
"Submissions: How to submit multiple things on a single assignment in Canvas: Go to the assignment page in Canvas click the "Submit Assignment" button use the "Choose File" button to select and upload the first file use the "Add Another File" button to select and upload additional files repeat the process for each file and click the "Submit Assignment" button again to finalize the submission. For a visual guide watch this video: https://www.loom.com/share/50d49ae85b514ded97a46b87b7b1523f."
"Textbook Requirements: REQUIRED TEXTBOOK AND EQUIPMENT - "Sams Teach Yourself PHP MySQL & JavaScript All in One" by Julie Meloni ISBN: 978-0-13-443958-7 "Don’t Make Me Think Revisited" by Steve Krug ISBN: 978-0-13-359726-4. Another good resource for JavaScript (free with your Clemson account) is https://learning.oreilly.com/library/view/javascript-from-beginner/9781800562523/Text/cover.xhtml."
"Syllabus: Platform-based development of client- and server-side technologies. Students create interactive and dynamically generated web applications using programming and command-line tools. Course content includes new Internet technologies. Preq or concurrent enrollment: CPSC 3600. 3 credits. Learning Outcomes: Design and implement a modern web application Compare and contrast web programming with general-purpose programming Describe the differences between software-as-a-service and traditional software Discuss how web standards impact software development Describe current web standards. Teaching Goals: Instruct - in-depth computer science as it relates to web application development (full stack) preparing for a job in web development Inspect - assess to ensure learning Inspire - help make the connection between instruction and life after graduation. Teaching Team: Instructor - Mr. Dan Wooster (edwoost@clemson.edu virtual office via MS Teams or Zoom during summer months email for appointment) TA - Apoorva Gaddam (agaddam@g.clemson.edu). Class Meeting Times: Online asynchronous mode during Summer 2023. Coursework Expectations: 3 credit hours expect to spend a minimum of 10 hours per week on this class. Topical Outline: Web programming languages and paradigms (e.g. HTML 5 JavaScript PHP CSS MySQL) Web platform constraints Software as a service Web standards Accessibility standards Web security standards Database-driven websites. Required Textbooks and Equipment: "Sams Teach Yourself PHP MySQL & JavaScript All in One" by Julie Meloni ISBN: 978-0-13-443958-7 (https://www.informit.com/store/php-mysql-javascript-all-in-one-sams-teach-yourself-9780672337703) "Don’t Make Me Think Revisited" by Steve Krug ISBN: 978-0-13-359726-4 another good resource for JavaScript (free with Clemson account) is https://learning.oreilly.com/library/view/javascript-from-beginner/9781800562523/Text/cover.xhtml. Laptop and Technology Requirements: Functioning laptop running Windows 10 or macOS 10.14 or later on a bootable partition webcam microphone stable internet connection Respondus LockDown Browser with webcam for quizzes and exams a practice quiz is available on Canvas. Laptop Usage Policy: Bring your laptop to class and lab laptops phone speakers and alarms must be set to mute or off before coming to class unauthorized communication or entertainment during class is prohibited no use of headphones during class. Communication: Check Canvas and Clemson email at least twice a day missing an assignment deadline or announcement because you did not check your email/Canvas is not excused. Canvas for announcements course materials assignments email goal to answer within 24 hours M-F. Mobile Devices: Silence devices and remove headsets before class no texting or playing games during class. Recording Devices: Lectures may not be recorded without written permission of the instructor. Attendance Policy: Attendance required submit absence form in advance in-class quizzes for attendance no make-ups for attendance exercises contact a fellow student if you miss class attendance impacts grade rounding. Grading: Exams 20% Quizzes 10% Exercises 30% Projects 30% Final Exam 10% Late penalty: -10% per day standard 10-point scale for letter grades. Assignments: Exams are closed book and require Respondus LockDown Browser with webcam exercises and projects involve creating web apps and hosting on a public web server final exam cumulative and closed book. Academic Continuity Plan: Class will be conducted in a virtual format if physical classroom facility is unavailable official notifications through email/www/text/social media. Academic Integrity Statement: No tolerance for lying cheating or stealing work independently unless instructed otherwise automated tools used to detect plagiarism violations result in academic dishonesty charge. Accessibility Statement: Contact Student Accessibility Services for accommodations due to disabilities or temporary injuries obtain Academic Access Letters early. Title IX (Sexual Harassment) Statement: University committed to equal opportunity faculty required to report sexual harassment or violence confidential resources available academic projects/discussions not required to be disclosed. Changes to Syllabus: Lecture topics and assignments subject to change deviations announced by the instructor."

"Week 1: Part I: Web Application Basics Date: May 14 - 18 Topic: Syllabus + Course Intro, Understanding How the Web Works, User Interface Design Readings: Syllabus, SAMS Book Chapter 1, DMMT Book: Introduction Assignments: SAMS CH01 Quiz, DMMT Intro Quiz, Prog01-Web Host, VQ's, Syllabus Quiz"
"Week 2: Part: I Web Application Basics Date: May 20 - 25 Topic: Structuring HTML and Using CSS, Understanding the CSS Box Model and Positioning, Don't Make Me Think Readings: SAMS Book Chapter 2, SAMS Book Chapter 3, DMMT Book: Chapter 1 Assignments: SAMS CH02 Quiz, SAMS CH03 Quiz, DMMT Ch01 Quiz, Prog02 - HTML & CSS, Prog03 - CSS Layout, VQ's"
"Week 3: Part: II Getting Started with Dynamic Websites Date: May 27 - June 1 Topic: Introducing Javascript, Introducing PHP, How We Use the Web Readings: SAMS Book Chapter 4, SAMS Book Chapter 5, DMMT Book: Chapter 2 Assignments: SAMS CH04 Quiz, SAMS CH05 Quiz, DMMT Ch02 Quiz, Prog04 - Javascript Events, Prog05 - PHP HelloWorld, VQ's"
"Week 4: Part: II Getting Started with Dynamic Websites Date: June 3 - 8 Topic: Understanding Dynamic Websites and HTML5 Applications, Javascript Fundamentals: Variables, Strings, Arrays, Billboard Design 101 Readings: SAMS Book Chapter 6, SAMS Book Chapter 7, DMMT Book: Chapter 3 Assignments: SAMS CH06 Quiz, SAMS CH07 Quiz, DMMT Ch03 Quiz, Prog06 - Moving Buttons, Prog07 - Javascript Sort, SAMS Exam 1 (chapters 1-5), VQ's"
"Week 5: Part: II Getting Started with Dynamic Websites Date: June 10 - 15 Topic: Javascript Fundamentals: Functions, Objects, Flow Control, Javascript Event Handling, Animal, Vegetable or Mineral Readings: SAMS Book Chapter 8, SAMS Book Chapter 9, DMMT Book: Chapter 4 Assignments: SAMS CH08 Quiz, SAMS CH09 Quiz, DMMT Ch04 Quiz, Prog08 - Card Object, Prog09 - Keypress, VQ's, Program Exam 1"
"Week 6: Part: Summer Break Date: June 17 - 22"
"Week 7: Part: III Taking Your Web Applications to the Next Level Date: June 24 - 29 Topic: The Basics of jQuery, Omit Words, Street Signs and Breadcrumbs, Big Bang Theory Readings: SAMS Book Chapter 10, DMMT Book: Chapter 5, Chapter 6, Chapter 7 Assignments: SAMS CH10 Quiz, DMMT Ch05 Quiz, DMMT Ch06 Quiz, DMMT Ch07 Quiz, Prog10 - Same Menu, Prog11 - jQuery, jQuery Quiz, Ch10 Source Code Quiz"
"Week 8: Part: III Taking Your Web Applications to the Next Level Date: July 1 - 6 Topic: AJAX: Remote Scripting, PHP Fundamentals: Variables, Strings, Arrays, The Farmer and Cowman, Usability Testing Readings: SAMS Book Chapter 11, SAMS Book Chapter 12, DMMT Book: Chapter 8, Chapter 9 Assignments: SAMS CH11 Quiz, SAMS CH12 Quiz, DMMT Ch08 Quiz, DMMT Ch09 Quiz, Ch11 Source Code Quiz, Prog12 - AJAX & PHP, Project 1"
"Week 9: Part: III Taking Your Web Applications to the Next Level Date: July 8 - 13 Topic: PHP Fundamentals: Functions, Objects, Flow Control, Cookies & User Sessions, Web Forms Readings: SAMS Book Chapter 13, SAMS Book Chapter 14, SAMS Book Chapter 15 Assignments: SAMS CH13 Quiz, SAMS CH14 Quiz, SAMS CH15 Quiz, Prog13 - Ajax & Handlebars, Prog14 - PHP File I/O, SAMS Exam 2 (chapters 6-13)"
"Week 10: Part: IV Integrating a Database into Your Application Date: July 15 - 20 Topic: Database Design, Basic SQL Commands Readings: SAMS Book Chapter 16, SAMS Book Chapter 17 Assignments: Project 2, Program Exam 2"
"Week 11: Part: IV Integrating a Database into Your Application Date: July 22 - 27 Topic: MySQL & PHP, Mobile, Usability Readings: SAMS Book Chapter 18, DMMT Book: Chapter 10, Chapter 11 Assignments: Database Quiz, DMMT Ch10 Quiz, Prog15 - Usability"
"Week 12: Part: IV Integrating a Database into Your Application Date: July 29 - Aug 3 Topic: Accessibility, Guide for the Perplexed Readings: DMMT Book: Chapter 12, Chapter 13 Assignments: Project 3"
"Week 13: Part: Final Exam Section Date: Aug 5 Assignments: SAMS Final Exam, DMMT Final Exam"

"SAMS: Chapter 1 What you’ll learn in this chapter: A very brief history of the World Wide Web, what is meant by the term web page, and why that term doesn’t always reflect all the content involved, how content gets from your personal computer to someone else’s web browser, how to select a web hosting provider, how different web browsers and device types can affect your content, how to transfer files to your web server using FTP, where files should be placed on a web server, how to distribute web content without a web server."
"SAMS: Chapter 1 "Understanding How the Web Works". "A very brief history of the World Wide Web what is meant by the term web page and why that term doesn’t always reflect all the content involved how content gets from your personal computer to someone else’s web browser how to select a web hosting provider how different web browsers and device types can affect your content how to transfer files to your web server using FTP where files should be placed on a web server how to distribute web content without a web server. 
"SAMS: Chapter 1 Before you learn the intricacies of HTML (Hypertext Markup Language), CSS (Cascading Style Sheets), and JavaScript—not to mention the back-end programming language PHP—it is important to gain a solid understanding of the technologies that help transform these plain-text files into the rich multimedia displays you see on your computer, tablet, or smartphone when browsing the World Wide Web."
"SAMS: Chapter 1 For example, a file containing markup and client-side code (HTML, CSS, and JavaScript) is useless without a web browser to view it, and no one besides yourself will see your content unless a web server is involved—this is especially true when server-side technologies such as PHP are put into the mix. Web servers make your content available to others who, in turn, use their web browsers to navigate to an address and wait for the server to send information to them. You will be intimately involved in this publishing process because you must create files, put them on a web server to make the content available, and ensure that your content will appear to the end user as you intended."
"SAMS: Chapter 1 A Brief History of HTML and the World Wide Web: Once upon a time, back when there weren’t any footprints on the moon, some farsighted folks decided to see whether they could connect several major computer networks. I’ll spare you the names and stories (there are plenty of both), but the eventual result was the “mother of all networks,” which we call the Internet. Until 1990, accessing information through the Internet was a rather technical affair. It was so hard, in fact, that even Ph.D.-holding physicists were often frustrated when trying to exchange data and documents. One such physicist, the now-famous (and knighted) Sir Tim Berners-Lee, cooked up a way to easily cross-reference text on the Internet through hypertext links. This wasn’t a new idea, but his simple Hypertext Markup Language (HTML) managed to thrive while more ambitious hypertext projects floundered. Hypertext originally meant text stored in electronic form with cross-reference links between pages. It is now a broader term that refers to just about any object (text, images, files, and so on) that can be linked to other objects. Hypertext Markup Language is a language for describing how text, graphics, and files containing other information are organized and linked. By 1993, only 100 or so computers throughout the world were equipped to serve up HTML pages. Those interlinked pages were dubbed the World Wide Web (WWW), and several web browser programs had been written to enable people to view web content. Because of the growing popularity of the Web, a few programmers soon wrote web browsers that could view graphical images along with text. From that point forward, the continued development of web browser software and the standardization of web technologies including HTML, CSS, and JavaScript have led us to the world we live in today, one in which more than a billion websites serve trillions (or more) of text and multimedia files. NOTE: For more information on the history of the World Wide Web, see the Wikipedia article on this topic: [Wikipedia - History of the Web](http://en.wikipedia.org/wiki/History_of_the_Web). These few paragraphs really are a brief history of what has been a remarkable period. Today’s college students have never known a time in which the World Wide Web didn’t exist, and the idea of always-on information and ubiquitous computing will shape all aspects of our lives moving forward. Instead of seeing dynamic web content creation and management as a set of skills possessed by only a few technically oriented folks (okay, call them geeks, if you will), by the end of this book, you will see that these are skills that anyone can master, regardless of inherent geekiness."
"SAMS: Chapter 1 Creating Web Content: You might have noticed the use of the term web content rather than web pages—that was intentional. Although we talk of “visiting a web page,” what we really mean is something like “looking at all the text and the images at one address on our computer.” The text that we read and the images that we see are rendered by our web browsers, which are given certain instructions found in individual files. Those files contain text that is marked up with, or surrounded by, HTML codes that tell the browser how to display the text—as a heading, as a paragraph, in a bulleted list, and so on. Some HTML markup tells the browser to display an image or video file rather than plain text, which brings me back to this point: Different types of content are sent to your web browser, so simply saying web page doesn’t begin to cover it. Here we use the term web content instead, to cover the full range of text, image, audio, video, and other media found online. In later chapters, you’ll learn the basics of linking to or creating the various types of multimedia web content found in websites, and for creating dynamic content from server-side scripts using PHP. All you need to remember at this point is that you are in control of the content a user sees when visiting your website. Beginning with the file that contains text to display or code that tells the server to send a graphic along to the user’s web browser, you have to plan, design, and implement all the pieces that will eventually make up your web presence. As you will learn throughout this book, it is not a difficult process as long as you understand all the little steps along the way. In its most fundamental form, web content begins with a simple text file containing HTML markup. In this book, you’ll learn about and compose standards-compliant HTML5 markup. One of the many benefits of writing standards-compliant code is that, in the future, you will not have to worry about having to go back to your code to fundamentally alter it so that it works on multiple types of browsers and devices. Instead, your code will (likely) always work as intended for as long as web browsers adhere to standards and the backwards compatibility to previous standards (which is hopefully a long time)."
"SAMS: Chapter 1 Understanding Web Content Delivery: Several processes occur in many different locations to eventually produce web content that you can see. These processes occur very quickly—on the order of milliseconds—and happen behind the scenes. Although we might think all we are doing is opening a web browser typing in a web address and instantaneously seeing the content we requested technology in the background is working hard on our behalf. Suppose you want to do a Google search so you type www.google.com in the address bar or select the Google bookmark from your bookmarks list. Almost immediately your browser shows you something like what’s shown in Figure 1.2. Figure 1.2 shows a website that contains text plus one image (the Google logo). A simple version of the processes that occurred to retrieve that text and image from a web server and display it on your screen follows: 1. Your web browser sends a request for the index.html file located at the http://www.google.com address. The index.html file does not have to be part of the address that you type in the address bar. 2. After receiving the request for a specific file the web server process looks in its directory contents for the specific file opens it and sends the content of that file back to your web browser. 3. The web browser receives the content of the index.html file which is text marked up with HTML codes and renders the content based on these HTML codes. While rendering the content the browser happens upon the HTML code for the Google logo. The HTML code looks something like this: `<img alt="Google" height="92" width="272" id="hplogo" src="/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png">`. The HTML code for the image is an `<img>` tag and it also provides attributes that tell the browser the file source location (src) width (width) and height (height) necessary to display the logo. 4. The browser looks at the src attribute in the `<img>` tag to find the source location. In this case the image googlelogo_color_272x92dp.png can be found in a subdirectory of the images directory at the same web address (www.google.com) from which the browser retrieved the HTML file. 5. The browser requests the file at the web address `http://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png` 6. The web server interprets that request finds the file and sends the contents of that file to the web browser that requested it. 7. The web browser displays the image on your monitor. As you can see in the description of the web content delivery process web browsers do more than simply act as picture frames through which you can view content. Browsers assemble the web content components and arrange those parts according to the HTML commands in the file. You can also view web content locally or on your own hard drive without the need for a web server. The process of content retrieval and display is the same as the process listed in the previous steps in that a browser looks for and interprets the codes and content of an HTML file but the trip is shorter: The browser looks for files on your own computer’s hard drive rather than on a remote machine. A web server would be needed to interpret any server-based programming language embedded in the files but that is outside the scope of this book. In fact you could work through all the HTML CSS and JavaScript lessons in this book without having a web server to call your own but then nobody but you could view your masterpieces."
"SAMS: Chapter 1 Selecting a Web Hosting Provider: Despite my just telling you that you can work through all the HTML, CSS, and JavaScript lessons in this book without having a web server, having a web server is the recommended method for continuing. Although the appendixes describe how to install a full-blown web server and database on your local machine for personal development, invariably you will want your static or dynamic websites to be visible to the public. Don’t worry—obtaining a hosting provider is usually a quick, painless, and relatively inexpensive process. In fact, you can get your own domain name and a year of web hosting for just slightly more than the cost of the book you are reading now. If you type web hosting provider in your search engine of choice, you will get millions of hits and an endless list of sponsored search results (also known as ads). Not this many web hosting providers exist in the world, although it might seem otherwise. Even if you are looking at a managed list of hosting providers, it can be overwhelming—especially if all you are looking for is a place to host a simple website for yourself or your company or organization. You’ll want to narrow your search when looking for a provider and choose one that best meets your needs. Some selection criteria for a web hosting provider follow: Reliability/server “uptime”—If you have an online presence, you want to make sure people can actually get there consistently. Customer service—Look for multiple methods for contacting customer service (phone, email, chat), as well as online documentation for common issues. Server space—Does the hosting package include enough server space to hold all the multimedia files (images, audio, video) you plan to include in your website (if any)? Bandwidth—Does the hosting package include enough bandwidth that all the people visiting your site and downloading files can do so without your having to pay extra? Domain name purchase and management—Does the package include a custom domain name, or must you purchase and maintain your domain name separately from your hosting account? Price—Do not overpay for hosting. If you see a wide range of prices offered, you should immediately wonder, “What’s the difference?” Often the difference has little to do with the quality of the service and everything to do with company overhead and what the company thinks it can get away with charging people. A good rule of thumb is that if you are paying more than $75 per year for a basic hosting package and domain name, you are probably paying too much. Here are three reliable web hosting providers whose basic packages contain plenty of server space and bandwidth (as well as domain names and extra benefits) at a relatively low cost. If you don’t go with any of these web hosting providers, you can at least use their basic package descriptions as a guideline as you shop around. NOTE: The author has used all these providers (and then some) over the years and has no problem recommending any of them; predominantly, she uses DailyRazor as a web hosting provider, especially for advanced development environments. A Small Orange (http://www.asmallorange.com)—The Tiny and Small hosting packages are perfect starting places for any new web content publisher. DailyRazor (http://www.dailyrazor.com)—Even its personal-sized hosting package is full-featured and reliable. Lunarpages (http://www.lunarpages.com)—The Starter hosting package is suitable for many personal and small business websites. One feature of a good hosting provider is that it offers a “control panel” for you to manage aspects of your account. Figure 1.3 shows the control panel for my own hosting account at DailyRazor. Many web hosting providers offer this particular control panel software, or some control panel that is similar in design—clearly labeled icons leading to tasks you can perform to configure and manage your account. You might never need to use your control panel, but having it available to you simplifies the installation of databases and other software, the viewing of web statistics, and the addition of email addresses (among many other features). If you can follow instructions, you can manage your own web server—no special training required."
"SAMS: Chapter 1 A web hosting provider is a service that allows individuals and organizations to make their websites accessible on the internet. It offers the technologies and services needed to store and serve website content, including files, images, videos, and databases, on web servers. Hosting providers also ensure that websites are available to users 24/7 by maintaining server uptime, providing customer support, and offering various hosting plans that cater to different needs, such as shared hosting, dedicated hosting, and cloud hosting."
"SAMS: Chapter 1 Some popular web hosting providers include: **Bluehost**: Known for its reliability, excellent customer service, and easy integration with WordPress. **HostGator**: Offers a variety of hosting plans, including shared, VPS, and dedicated hosting, with 24/7 customer support. **SiteGround**: Renowned for its fast performance, robust security features, and top-notch customer service. **A2 Hosting**: Provides high-speed hosting solutions with a focus on performance and developer-friendly options. **InMotion Hosting**: Offers a range of hosting services with reliable uptime, good customer support, and advanced features. **DreamHost**: Known for its strong commitment to privacy, user-friendly control panel, and reliable hosting services. **GoDaddy**: One of the largest domain registrars, also offering a wide range of hosting plans with comprehensive support. **DigitalOcean**: Popular for its scalable cloud hosting solutions, aimed at developers and tech-savvy users. **Amazon Web Services (AWS)**: Offers a vast array of cloud computing services and scalable hosting solutions suitable for businesses of all sizes. **Microsoft Azure**: Provides robust cloud hosting services with extensive integration options for businesses and developers. These providers are known for their reliability, performance, and range of features, catering to different needs and budgets. Put all in one line"
"SAMS: Chapter 1 Testing with Multiple Web Browsers: Now that we’ve just discussed the process of web content delivery and the acquisition of a web server, it might seem a little strange to step back and talk about testing your websites with multiple web browsers. However, before you go off and learn all about creating websites with HTML and CSS, do so with this very important statement in mind: Every visitor to your website will potentially use hardware and software configurations that are different from your own. From their device types (desktop, laptop, tablet, smartphone) to their screen resolutions, browser types, browser window sizes, and speed of connections—you cannot control any aspect of what your visitors use when they view your site. So just as you’re setting up your web hosting environment and getting ready to work, think about downloading several web browsers so that you have a local test suite of tools available to you. Let me explain why this is important. Although all web browsers process and handle information in the same general way, some specific differences among them result in things not always looking the same in different browsers. Even users of the same version of the same web browser can alter how a page appears by choosing different display options and/or changing the size of their viewing windows. All the major web browsers allow users to override the background and fonts the web page author specifies with those of their own choosing. Screen resolution, window size, and optional toolbars can also change how much of a page someone sees when it first appears on the screen. You can ensure only that you write standards-compliant HTML and CSS. NOTE: In Chapter 3, “Understanding the CSS Box Model and Positioning,” you’ll learn a little bit about the concept of responsive web design, in which the design of a site shifts and changes automatically depending on the user’s behavior and viewing environment (screen size, device, and so on). Do not, under any circumstances, spend hours on end-designing something that looks perfect only on your own computer—unless you are willing to be disappointed when you look at it on your friend’s computer, on a computer in the local library, or on your iPhone. You should always test your websites with as many of these web browsers as possible, on standard, portable, and mobile devices: Apple Safari (http://www.apple.com/safari/) for Mac, Google Chrome (http://www.google.com/chrome) for Mac, Windows, and Linux/UNIX, Microsoft Internet Explorer (http://www.microsoft.com/ie) and Microsoft Edge (https://www.microsoft.com/microsoft-edge) for Windows, Mozilla Firefox (http://www.mozilla.com/firefox/) for Mac, Windows, and Linux/UNIX. Now that you have a development environment set up, or at least some idea of the type you’d like to set up in the future, let’s move on to creating a test file."
"SAMS: Chapter 1 Creating a Sample File: Before we begin take a look at Listing 1.1. This listing represents a simple piece of web content—a few lines of HTML that print “Hello World! Welcome to My Web Server.” in large bold letters on two lines centered within the browser window. You’ll learn more about the HTML and CSS used within this file as you move forward in this book. LISTING 1.1 Our Sample HTML File: `<!DOCTYPE html> <html> <head> <title>Hello World!</title> </head> <body> <h1 style="text-align: center">Hello World!<br> Welcome to My Web Server.</h1> </body> </html>` To make use of this content open a text editor of your choice such as Notepad (on Windows) or TextEdit (on a Mac). Do not use WordPad Microsoft Word or other full-featured word processing software because those programs create different sorts of files from the plain-text files we use for web content. Type the content that you see in Listing 1.1 and then save the file using sample.html as the filename. Be sure your editor does not change the extension you give it the .html extension tells the web server that your file is indeed full of HTML. When the file contents are sent to the web browser that requests it the browser will also know it is HTML and will render it appropriately. Now that you have a sample HTML file to use—and hopefully somewhere to put it such as a web hosting account—let’s get to publishing your web content."
"SAMS: Chapter 1 Using FTP to Transfer Files: As you’ve learned so far, you have to put your web content on a web server to make it accessible to others. This process typically occurs by using the File Transfer Protocol (FTP). To use FTP, you need an FTP client—a program used to transfer files from your computer to a web server. FTP clients require three pieces of information to connect to your web server; this information will have been sent to you by your hosting provider after you set up your account: the hostname, or address, to which you will connect; your account username; your account password. When you have this information, you are ready to use an FTP client to transfer content to your web server."
"SAMS: Chapter 1 Selecting an FTP Client: Regardless of the FTP client you use, FTP clients generally use the same type of interface. Figure 1.4 shows an example of FireFTP, which is an FTP client used with the Firefox web browser. The directory listing of the local machine (your computer) appears on the left of your screen, and the directory listing of the remote machine (the web server) appears on the right. Typically, you will see right-arrow and left-arrow buttons, as shown in Figure 1.4. The right arrow sends selected files from your computer to your web server; the left arrow sends files from the web server to your computer. Many FTP clients also enable you to simply select files and then drag and drop those files to the target machines. Many FTP clients are freely available to you, but you can also transfer files via the web-based file management tool that is likely part of your web server’s control panel. However, that method of file transfer typically introduces more steps into the process and isn’t nearly as streamlined (or simple) as the process of installing an FTP client on your own machine. Here are some popular free FTP clients: Classic FTP (http://www.nchsoftware.com/classic/) for Mac and Windows, Cyberduck (http://cyberduck.ch) for Mac, Fetch (http://fetchsoftworks.com) for Mac, FileZilla (http://filezilla-project.org) for all platforms, FireFTP (http://fireftp.mozdev.org) Firefox extension for all platforms. FIGURE 1.4 The FireFTP interface. When you have selected an FTP client and installed it on your computer, you are ready to upload and download files from your web server. In the next section, you'll see how this process works using the sample file in Listing 1.1."
"SAMS: Chapter 1 FTP stands for File Transfer Protocol. It is a standard network protocol used to transfer files between a client and a server over the Internet or a local network. FTP allows users to upload, download, delete, and manage files on a remote server."
"SAMS: Chapter 1 source code: https://github.com/upstate-csci-450-master/chap01-sample"
"SAMS: Chapter 1 Using an FTP Client: The following steps show how to use Classic FTP to connect to your web server and transfer a file. However, all FTP clients use similar, if not identical, interfaces. If you understand the following steps, you should be able to use any FTP client. (Remember, you first need the hostname, the account username, and the account password.) 1. Start the Classic FTP program and click the Connect button. You are prompted to fill out information for the site to which you want to connect, as shown in Figure 1.5. 2. Fill in each of the items shown in Figure 1.5 as described here: The FTP Server is the FTP address of the web server to which you need to send your content. Your hosting provider will have given you this address. It probably is yourdomain.com, but check the information you received when you signed up for service. Complete the User Name field and the Password field using the information your hosting provider gave you. FIGURE 1.5 Connecting to a new site in Classic FTP. 3. You can switch to the Advanced tab and modify the following optional items, shown in Figure 1.6: The Site Label is the name you’ll use to refer to your own site. Nobody else will see this name, so enter whatever you want. You can change the values for Initial Remote Directory on First Connection and Initial Local Directory on First Connection, but you might want to wait until you have become accustomed to using the client and have established a workflow. 4. When you’re finished with the settings, click Add Site to save them. You can then click Connect to establish a connection with the web server. You will see a dialog box indicating that Classic FTP is attempting to connect to the web server. Upon a successful connection, you will see an interface like the one in Figure 1.7, showing the contents of the local directory on the left and the contents of your web server on the right. FIGURE 1.6 The advanced connection options in Classic FTP. 5. You are now almost ready to transfer files to your web server. All that remains is to change directories to what is called the document root of your web server. The document root of your web server is the directory that is designated as the top-level directory for your web content—the starting point of the directory structure, which you’ll learn more about later in this chapter. Often, this directory is named public_html, www (because www has been created as an alias for public_html), or htdocs. You do not have to create this directory; your hosting provider will have created it for you. Double-click the document root directory name to open it. The display shown on the right of the FTP client interface changes to show the contents of this directory (it will probably be empty at this point, unless your web hosting provider has put placeholder files in that directory on your behalf). FIGURE 1.7 A successful connection to a remote web server via Classic FTP. 6. The goal is to transfer the sample.html file you created earlier from your computer to the web server. Find the file in the directory listing on the left of the FTP client interface (navigate if you have to) and click it once to highlight the filename. 7. Click the right-arrow button in the middle of the client interface to send the file to the web server. When the file transfer completes, the right side of the client interface refreshes to show you that the file has made it to its destination. 8. Click the Disconnect button to close the connection, and then exit the Classic FTP program. These steps are conceptually similar to the steps you take anytime you want to send files to your web server via FTP. You can also use your FTP client to create subdirectories on the remote web server. To create a subdirectory using Classic FTP, click the Remote menu and then click New Folder. Different FTP clients have different interface options to achieve the same goal."
"SAMS: Chapter 1 Understanding Where to Place Files on the Web Server: An important aspect of maintaining web content is determining how you will organize that content—not only for the user to find, but also for you to maintain on your server. Putting files in directories helps you manage those files. Naming and organizing directories on your web server, and developing rules for file maintenance, is completely up to you. However, maintaining a well-organized server makes your management of its content more efficient in the long run."
"SAMS: Chapter 1 Basic File Management: As you browse the Web you might have noticed that URLs change as you navigate through websites. For instance if you’re looking at a company’s website and you click on graphical navigation leading to the company’s products or services the URL probably changes from http://www.companyname.com/ to http://www.companyname.com/products/ or http://www.companyname.com/services/. In the preceding section I used the term document root without really explaining what that is all about. The document root of a web server is essentially the trailing slash in the full URL. For instance if your domain is yourdomain.com and your URL is http://www.yourdomain.com/ the document root is the directory represented by the trailing slash (/). The document root is the starting point of the directory structure you create on your web server it is the place where the web server begins looking for files requested by the web browser. If you put the sample.html file in your document root as previously directed you will be able to access it via a web browser at the following URL: http://www.yourdomain.com/sample.html. If you entered this URL into your web browser you would see the rendered sample.html file as shown in Figure 1.8. However if you created a new directory within the document root and put the sample.html file in that directory the file would be accessed at this URL: http://www.yourdomain.com/newdirectory/sample.html. FIGURE 1.8 The sample.html file accessed via a web browser. If you put the sample.html file in the directory you originally saw upon connecting to your server—that is you did not change directories and place the file in the document root—the sample.html file would not be accessible from your web server at any URL. The file will still be on the machine that you know as your web server but because the file is not in the document root—where the server software knows to start looking for files—it will never be accessible to anyone via a web browser. The bottom line? Always navigate to the document root of your web server before you start transferring files. This is especially true with graphics and other multimedia files. A common directory on web servers is called images where as you can imagine all the image assets are placed for retrieval. Other popular directories include css for style sheet files (if you are using more than one) and js for JavaScript files. Alternatively if you know that you will have an area on your website where visitors can download many types of files you might simply call that directory downloads. Whether it’s a ZIP file containing your art portfolio or an Excel spreadsheet with sales numbers it’s often useful to publish a file on the Internet that isn’t simply a web page. To make available on the Web a file that isn’t an HTML file just upload the file to your website as if it were an HTML file following the instructions earlier in this chapter for uploading. After the file is uploaded to the web server you can create a link to it (as you’ll learn in Chapter 2 “Structuring HTML and Using Cascading Style Sheets”). In other words your web server can serve much more than HTML. Here’s a sample of the HTML code you will learn more about later in this book. The following code would be used for a file named artfolio.zip located in the downloads directory of your website and with link text that reads Download my art portfolio!: `<a href="/downloads/artfolio.zip">Download my art portfolio!</a>`"
"SAMS: Chapter 1 Using an Index Page: When you think of an index, you probably think of the section in the back of a book that tells you where to look for various keywords and topics. The index file in a web server directory can serve that purpose—if you design it that way. In fact, that’s where the name originates. The index.html file (or just index file, as it’s usually referred to) is the name you give to the page you want people to see as the default file when they navigate to a specific directory in your website. Another function of the index page is that users who visit a directory on your site that has an index page but who do not specify that page will still land on the main page for that section of your site—or for the site itself. For instance, you can type either of the following URLs and land on Apple’s iPhone informational page: http://www.apple.com/iphone/ or http://www.apple.com/iphone/index.html. Had there been no index.html page in the iphone directory, the results would depend on the configuration of the web server. If the server is configured to disallow directory browsing, the user would have seen a “Directory Listing Denied” message when attempting to access the URL without a specified page name. However, if the server is configured to allow directory browsing, the user would have seen a list of the files in that directory. Your hosting provider will already have determined these server configuration options. If your hosting provider enables you to modify server settings via a control panel, you can change these settings so that your server responds to requests based on your own requirements. Not only is the index file used in subdirectories, but it’s used in the top-level directory (or document root) of your website as well. The first page of your website—or home page or main page, or however you like to refer to the web content you want users to see when they first visit your domain—should be named index.html and placed in the document root of your web server. This ensures that when users type http://www.yourdomain.com/ into their web browsers, the server responds with the content you intended them to see (instead of “Directory Listing Denied” or some other unintended consequence)."
"SAMS: Chapter 1 Summary: This chapter introduced you to the concept of using HTML to mark up text files to produce web content. You also learned that there is more to web content than just the “page”—web content also includes image, audio, and video files. All this content lives on a web server—a remote machine often far from your own computer. On your computer or other device, you use a web browser to request, retrieve, and eventually display web content on your screen. You learned the criteria to consider when determining whether a web hosting provider fits your needs. After you have selected a web hosting provider, you can begin to transfer files to your web server, which you also learned how to do, using an FTP client. You also learned a bit about web server directory structures and file management, as well as the very important purpose of the index.html file in a given web server directory. In addition, you learned that you can distribute web content on removable media, and you learned how to go about structuring the files and directories to achieve the goal of viewing content without using a remote web server. Finally, you learned the importance of testing your work in multiple browsers after you’ve placed it on a web server. Writing valid, standards-compliant HTML and CSS helps ensure that your site looks reasonably similar for all visitors, but you still shouldn’t design without receiving input from potential users outside your development team—it is even more important to get input from others when you are a design team of one!"
"SAMS: Chapter 1 Q&A: Q. I’ve looked at the HTML source of some websites on the Internet, and it looks frighteningly difficult to learn. Do I have to think like a computer programmer to learn this stuff? A. Although complex HTML pages can indeed look daunting, learning HTML is much easier than learning actual programming languages—we’re saving that for later on in this book, and you’ll do just fine with it as well. HTML is a markup language rather than a programming language; you mark up text so that the browser can render the text a certain way. That’s a completely different set of thought processes than developing a computer program. You really don’t need any experience or skill as a computer programmer to be a successful web content author. One of the reasons the HTML behind many commercial websites looks complicated is that it was likely created by a visual web design tool—a “what you see is what you get” (WYSIWYG) editor that uses whatever markup its software developer told it to use in certain circumstances—as opposed to being hand-coded (where you are completely in control of the resulting markup). In this book, you are taught fundamental coding from the ground up, which typically results in clean, easy-to-read source code. Visual web design tools have a knack for making code difficult to read and for producing code that is convoluted and not standards-compliant. Q. Running all the tests you recommend would take longer than creating my pages! Can’t I get away with less testing? A. If your pages aren’t intended to make money or provide an important service, it’s probably not a big deal if they look funny to some users or produce errors once in a while. In that case, just test each page with a couple of different browsers and call it a day. However, if you need to project a professional image, there is no substitute for rigorous testing. Q. Seriously, who cares how I organize my web content? A. Believe it or not, the organization of your web content does matter to search engines and potential visitors to your site. But overall, having an organized web server directory structure helps you keep track of content that you are likely to update frequently. For instance, if you have a dedicated directory for images or multimedia, you know exactly where to look for a file you want to update—no need to hunt through directories containing other content."
"SAMS: Quiz: 1. How many files would you need to store on a web server to produce a single web page with some text and two images on it? 2. What are some of the features to look for in a web hosting provider? 3. What three pieces of information do you need in order to connect to your web server via FTP? 4. What is the purpose of the index.html file? 5. Does your website have to include a directory structure? Answers: 1. You would need three: one for the web page itself, which includes the text and the HTML markup, and one for each of the two images. 2. Look for reliability, customer service, web space and bandwidth, domain name service, site-management extras, and price. 3. You need the hostname, your account username, and your account password. 4. The index.html file is typically the default file for a directory within a web server. It enables users to access http://www.yourdomain.com/somedirectory/ without using a trailing filename and still end up in the appropriate place. 5. No. Using a directory structure for file organization is completely up to you, although using one is highly recommended because it simplifies content maintenance."

"DMMT Introduction: Introduction: Read me first: THROAT CLEARING AND DISCLAIMERS I can’t tell you anything you don’t already know. But I’d like to clarify a few things. —JOE FERRARA, A HIGH SCHOOL FRIEND OF MINE I have a great job. I’m a usability consultant. Here’s what I do: People (“clients”) send me something they’re working on. It could be designs for a new Web site they’re building, or the URL of a site that they’re redesigning, or a prototype of an app. I try using what they send me, doing the things that their users would need or want to do with it. I note the places where people are likely to get stuck and the things that I think will confuse them (an “expert usability review”). Sometimes I get other people to try using it while I watch to see where they get stuck and confused (“usability testing”). I have a meeting with the client’s team to describe the problems I found that are likely to cause users grief (“usability issues”) and help them decide which ones are most important to fix and how best to fix them. Sometimes we work by the phone... and sometimes in person. I used to write what I called the “big honking report” detailing my findings, but I finally realized that it wasn’t worth the time and effort. A live presentation allows people to ask me questions and voice their concerns—something a written report doesn’t do. And for teams doing Agile or Lean development, there’s no time for written reports anyway. They pay me. Being a consultant, I get to work on interesting projects with a lot of nice, smart people. I get to work at home most of the time and I don’t have to sit in mind-numbing meetings every day or deal with office politics. I get to say what I think, and people usually appreciate it. And I get paid well. On top of all that, I get a lot of job satisfaction, because when we’re finished, the things they’re building are almost always much better than when we started. Almost always. Even when people know about usability problems, they can’t always fix them completely, as I’ll explain in Chapter 9."
"DMMT Introduction: Introduction: The bad news: You probably don’t have a usability professional: Almost every development team could use somebody like me to help them build usability into their products. Unfortunately, the vast majority of them can’t afford to hire a usability professional. And even if they could, there aren’t enough to go around. At last count there were umpteen billion Web sites (and umpteen billion apps for the iPhone alone) and only about 10,000 usability consultants worldwide. You do the math. (I’m not quite sure why Apple brags about this. Having thousands of good apps for a platform is a really good thing. Having millions of mediocre apps just means it’s really hard to find the good ones.) And even if you do have a professional on your team, that person can’t possibly look at everything the team produces. In the last few years, making things more usable has become almost everybody’s responsibility. Visual designers and developers now often find themselves doing things like interaction design (deciding what happens next when the user clicks, taps, or swipes) and information architecture (figuring out how everything should be organized). I wrote this book mainly for people who can’t afford to hire (or rent) someone like me. Knowing some usability principles will help you see the problems yourself—and help keep you from creating them in the first place. No question: If you can afford to, hire someone like me. But if you can’t, I hope this book will enable you to do it yourself (in your copious spare time)."
"DMMT Introduction: Introduction: The good news: It’s not rocket surgery™: Fortunately, much of what I do is just common sense, and anyone with some interest can learn to do it. Like a lot of common sense, though, it’s not necessarily obvious until after someone’s pointed it out to you. (…which is one reason why my consulting business is called Advanced Common Sense. “It’s not rocket surgery” is my corporate motto.) I spend a lot of my time telling people things they already know, so don’t be surprised if you find yourself thinking “I knew that” a lot in the pages ahead. © 2013. The New Yorker Collection from cartoonbank.com All Rights Reserved. It’s a thin book. More good news: I’ve worked hard to keep this book short—hopefully short enough so you can read it on a long plane ride. I did this for two reasons: If it’s short, it’s more likely to actually be used. (There’s a good usability principle right there: If something requires a large investment of time—or looks like it will—it’s less likely to be used.) I’m writing for the people who are in the trenches—the designers, the developers, the site producers, the project managers, the marketing people, and the people who sign the checks—and for the one-man-bands who are doing it all themselves. Usability isn’t your life’s work, and you don’t have time for a long book."
"DMMT Introduction: Introduction: You don’t need to know everything. As with any field, there’s a lot you could learn about usability. But unless you’re a usability professional, there’s a limit to how much is useful for you to learn. (I’ve always liked the passage in A Study in Scarlet where Dr. Watson is shocked to learn that Sherlock Holmes doesn’t know that the earth travels around the sun. Given the finite capacity of the human brain, Holmes explains, he can’t afford to have useless facts elbowing out the useful ones: “What the deuce is it to me? You say that we go round the sun. If we went round the moon it would not make a pennyworth of difference to me or to my work.”) I find that the most valuable contributions I make to each project always come from keeping just a few key usability principles in mind. I think there’s a lot more leverage for most people in understanding these principles than in another laundry list of specific do’s and don’ts. I’ve tried to boil down the few things I think everybody involved in design should know about usability."
"DMMT Introduction: Introduction: Not present at time of photo: Just so you don’t waste your time looking for them, here are a few things you won’t find in this book: Hard and fast usability rules. I’ve been at this for a long time, long enough to know that there is no one “right” answer to most usability questions. Design is a complicated process and the real answer to most of the questions people ask me is “It depends.” But I do think that there are a few useful guiding principles it always helps to have in mind, and those are what I’m trying to convey. Predictions about the future of technology and the Web. Honestly, your guess is as good as mine. The only thing I’m sure of is that (a) most of the predictions I hear are almost certainly wrong, and (b) the things that will turn out to be important will come as a surprise, even though in hindsight they’ll seem perfectly obvious. Bad-mouthing of poorly designed sites and apps. If you enjoy people poking fun at things with obvious flaws, you’re reading the wrong book. Designing, building, and maintaining a great Web site or app isn’t easy. It’s like golf: a handful of ways to get the ball in the hole, a million ways not to. Anyone who gets it even half right has my admiration. As a result, you’ll find that the examples I use tend to be from excellent products with minor flaws. I think you can learn more from looking at good designs than bad ones."
"DMMT Introduction: Introduction: Now with Mobile!: One of the dilemmas I faced when updating this book was that it’s always been a book about designing usable Web sites. Even though the principles apply to the design of anything people have to interact with (including things like election ballots and voting booths, and even PowerPoint presentations), its focus was clearly on Web design, and all the examples were from Web sites. Until recently, that’s what most people were working on. But now there are a lot of people designing mobile apps, and even the people working on Web sites have to create versions of them that work well on mobile devices. I know they’re very interested in how all of this applies to them. So I did three things: Included mobile examples wherever it made sense; Added a new chapter about some mobile-specific usability issues; And the most important one: Added “and Mobile” to the subtitle on the cover. And as you’ll see, in some places where it made things clearer, instead of “Web site” I’ve written “Web site or mobile app.” In most cases, though, I used the Web-centric wording to keep things from getting cumbersome and distracting. One last thing, before we begin: One crucial thing, really: My definition of usability. You’ll find a lot of different definitions of usability, often breaking it down into attributes like Useful: Does it do something people need done? Learnable: Can people figure out how to use it? Memorable: Do they have to relearn it each time they use it? Effective: Does it get the job done? Efficient: Does it do it with a reasonable amount of time and effort? Desirable: Do people want it? and recently even Delightful: Is using it enjoyable, or even fun? I’ll talk about these later. But to me, the important part of the definition is pretty simple. If something is usable—whether it’s a Web site, a remote control, or a revolving door—it means that A person of average (or even below average) ability and experience can figure out how to use the thing to accomplish something without it being more trouble than it’s worth. Take my word for it: It’s really that simple. I hope this book will help you build better products and—if it lets you skip a few of the endless arguments about design—maybe even get home in time for dinner once in a while."

"Internet design began in which decade? 1970"
"The forerunner to the Internet was called ARPANET which stood for Advanced Research Project Agency Network."
"The initial goal was to build a network that would withstand a nuclear attack."
"The internet is an example of which type of network? Distributed."
"The word internet is the combination of 2 words - interconnected and network"
"The 3 key things listed in the video that are needed to make the internet work are: a way to route the packages, interconnected network, rules for packaging data"
"HTTP is a very popular protocol on the internet. It stands for 'hyper-text-transfer-protocol'"
"POP is referred to as "Point of Precense" which allows the device to connect to it's internet service provider or ISP"
"All POP's are connected to network access points or NAPS. These NAPS are linked together through an ultra-fast connection called the internet backbone."
"A router is the name of the special computer device which knows how to direct packets to the right destination."
"Tim Berners-Lee is the father of the World Wide Web"
"ISP (Internet Service Provider) - Gain Access : An Internet Service Provider (ISP) is a company that provides you with access to the Internet. ISPs connect users to the internet and provide services such as email, web hosting, and more. Examples include companies like Comcast, AT&T, and Verizon. Without an ISP, you wouldn't be able to access the web from your home or business. put in one line"
"Hosting Company - Web Space : A hosting company provides the infrastructure and services needed to store your website's files and make them accessible on the internet referred to as "web space" or "web hosting"; when you rent space from a hosting company you're paying for a server where your website's files are stored and served to users who visit your site; examples include Bluehost HostGator and AWS."
"Registrar - Web Address Explanation : A registrar is a company that manages the reservation of internet domain names. When you want to have a web address (e.g., www.example.com), you go to a registrar to purchase and register the domain name. This ensures that your web address is unique and points to your website. Examples of registrars include GoDaddy, Namecheap, and Google Domains."
"An ISP gives you access to the internet. A hosting company provides the space to store your website's files. A registrar allows you to register and manage your website's domain name"
"What is DOM? The Document Object Model (DOM) is a programming interface for HTML and XML documents that represents the document as a tree structure where each node is an object representing a part of the document (elements, attributes, text, etc.); the DOM is necessary for making web pages dynamic and interactive by allowing JavaScript to manipulate the document structure, style, and content; it provides programmatic access for creating, deleting, or modifying elements and attributes, enabling web pages to be interactive; browsers use the DOM to parse HTML and create a tree-like structure to determine how content should be displayed; it is essential for handling events such as clicks and key presses, allowing developers to create responsive web applications; and it ensures consistency and standards for cross-browser compatibility."
"What part of the web browser takes in HTML and CSS and interprets to display contents? rendering engine"
"V8 is a javascript interpreter used by Google Chrome"
"Both HTML and XML are examples of markup languages."
"Which browser uses the rendering engine named Blink? Chrome"
"Once the rendering engine reads the HTML it creates a DOM which represents what is being requested. What do the letters Document Object Model stand for?"
"The DOM (Document Object Model) is a structured representation of an HTML or XML document in a tree-like form. It allows web browsers to understand and manipulate the content and structure of a web page. Each part of the document (like elements, attributes, and text) is represented as nodes in this tree, enabling JavaScript to dynamically interact with the page."
"Steps in the browser rendering process: 1.) process HTML markup and build DOM tree 2.) process CSS markup and build the CSSOM tree 3.) combine DOM and CSSOM into a render tree 4.) run layout on the render tree to compute geometry of each node 5.) paint the individual notes to the screen"
"CSSOM: The CSSOM (CSS Object Model) is a representation of the CSS styles of a web document, structured as a tree. It is created by the browser when it processes the CSS files. The CSSOM allows JavaScript to read and modify CSS styles dynamically, enabling changes to the appearance of the web page without reloading."
"Browser rendering is the process by which a web browser translates the HTML, CSS, and JavaScript code of a web page into a visual representation that can be displayed on the screen. Here’s a simplified breakdown of the steps involved: 1. **HTML Parsing**: The browser reads the HTML and creates a Document Object Model (DOM) tree, which represents the structure and content of the document. 2. **CSS Parsing**: The browser reads the CSS and creates the CSS Object Model (CSSOM) tree, which represents the styling information for the document. 3. **JavaScript Execution**: The browser executes any JavaScript code, which can manipulate the DOM and CSSOM. 4. **Render Tree Construction**: The browser combines the DOM and CSSOM trees to create a render tree, which includes only the elements needed for displaying the page. 5. **Layout**: The browser calculates the layout, determining the size and position of each element on the page. 6. **Painting**: The browser paints the pixels on the screen, rendering the visual representation of the web page based on the render tree and layout calculations. This process happens quickly and repeatedly to ensure the web page is displayed accurately and updates in real-time with user interactions."
"HTTPS (Hyper Text Transfer Protocol Secure) is the protocol that handles encrypted web requests"
"HTTP (Hyper Text Transfer Protocol) is standard non-encrypted requests."
"Proper URL (Uniform Resource Locator) order. Example http://example.com/path?query=value where: http:// is the Protocol, example.com is the Host or Server, /path is the Path and tells the server what the client wants and defines which section of code on the server should be run in order to get the correct response. Essentially the server is broken down to different sections which correspond to a specific path. /query=value is the Querystring and is broken down into Key-Values which augment the response to a specific path."
"HTTP Methods or Server Action Requests: The valid server action requests, commonly referred to as HTTP methods, are: **GET** (retrieves data from the server), **POST** (submits data to be processed to the server), **PUT** (updates or replaces data on the server), **DELETE** (deletes data from the server), **HEAD** (similar to GET, but retrieves only the headers and not the body of the response), **OPTIONS** (describes the communication options for the target resource), **PATCH** (applies partial modifications to a resource), **CONNECT** (establishes a tunnel to the server identified by the target resource), and **TRACE** (performs a message loop-back test along the path to the target resource)."

"Web Application: A piece of software that can be accessed by the browser. It call also be called a Web Server or Network applicatoin listening on some port"
"A web server can host multiple web applications."
"A web server is a network application listening on a port."
"When 2 or more computer applications are communicating, they need to use the same set of rules, known as the protocol."
"When a web client requests a PDF document from a web server application, this is an example of a static request."
"When a web client requests the current time from a web server application, this is an example of a dynamic request."
"A marketing web page with static content is an example of a web page"
"A website that requires a user login is an example of a web app"
"Both static and dynamic web pages consist of HTML as seen by the end user"
"All web pages that demonstrate action require code that runs on the web server as opposed to the web browser."
"A web server is a network application that processes requests via HTTP (Hypertext Transfer Protocol), serving web content such as HTML pages, images, and other resources to clients (typically web browsers). It listens on a specific port (usually port 80 for HTTP or port 443 for HTTPS) and responds to requests from clients, delivering the requested resources or executing server-side scripts to generate dynamic content."

"SAMS: Chapter 2 Structuring HTML and Using Cascading Style Sheets"
"SAMS: Chapter 2 What you will learn: What You’ll Learn in This Chapter: How to create a simple web page in HTML, How to include the HTML tags that every web page must have, How to use links within your web pages, How to organize a page with paragraphs and line breaks, How to organize your content with headings, How to use the semantic elements of HTML5, How to begin using basic CSS"
"SAMS: Chapter 2 In the first chapter, you got a basic idea of the process behind creating web content and viewing it online (or locally, if you do not yet have a web hosting provider). In this chapter, we get down to the business of explaining the various elements that must appear in an HTML file so that it is displayed appropriately in your web browser. In general, this chapter provides an overview of HTML basics and gives some practical tips to help you make the most of your time as a web developer. You’ll begin to dive a bit deeper into the theory behind it all as you learn about the HTML5 elements that enable you to enhance the semantics—the meaning—of the information that you provide in your marked-up text. You’ll take a closer look at six elements that are fundamental to solid semantic structuring of your documents: `<header>`, `<section>`, `<article>`, `<nav>`, `<aside>`, and `<footer>`. Finally, you’ll learn the basics of fine-tuning the display of your web content using Cascading Style Sheets (CSS), which enable you to set a number of formatting characteristics, including exact typeface controls, letter and line spacing, and margins and page borders, just to name a few."
"SAMS: Chapter 2 Getting started with a simple web page: In the first chapter, you learned that a web page is just a text file that is marked up by (or surrounded by) HTML code that provides guidelines to a browser for displaying the content. To create these text files, use a plain-text editor such as Notepad on Windows or TextEdit on a Mac—do not use WordPad, Microsoft Word, or other full-featured word-processing software because those create different sorts of files than the plain-text files used for web content."
"SAMS: Chapter 2 As you go through this chapter, you will add HTML markup (called tags) to the text file, thus turning it into content that is best viewed in a web browser. When you save files containing HTML tags, always give them a name ending in .html. This is important—if you forget to type the .html at the end of the filename when you save the file, most text editors will give it some other extension (such as .txt). If that happens, you might not be able to find the file when you try to look at it with a web browser; if you find it, it certainly won’t display properly. In other words, web browsers expect a web page file to have a file extension of .html and to be in plain-text format. When visiting websites, you might also encounter pages with a file extension of .htm, which is another acceptable file extension to use. You might find other file extensions used on the Web, such as .jsp (Java Server Pages), .aspx (Microsoft Active Server Pages), and .php (PHP: Hypertext Preprocessor). These files also contain HTML in addition to the programming language—although the programming code in those files is executed on the server side and all you would see on the client side is the HTML output. If you looked at the source files, you would likely see some intricate weaving of programming and markup codes. You’ll learn more about this process in later chapters as you learn to integrate PHP into your websites."
"SAMS: Chapter 2 Every web page you create must include a <!DOCTYPE> declaration, as well as <html></html>, <head></head>, <title></title>, and <body></body> tag pairs"
"SAMS: Chapter 2 As in every HTML page, the words starting with `<` and ending with `>` are actually coded commands. These coded commands are called HTML tags because they “tag” pieces of text and tell the web browser what kind of text it is. This allows the web browser to display the text appropriately. The first line in the document is the document type declaration; you are declaring that it is HTML (specifically, HTML5) because `html` is the value used to declare a document as HTML5 in the `<!DOCTYPE>` tag."
"SAMS: Chapter 2 HTML tags every web page must have: The time has come for the secret language of HTML tags to be revealed to you. When you understand this language, you will have creative powers far beyond those of other humans. Don’t tell the other humans, but it’s really pretty easy. The first line of code is the document type declaration; in HTML5, this is simply `<!DOCTYPE html>`. This declaration identifies the document as being HTML5, which then ensures that web browsers know what to expect and can prepare to render content in HTML5. Many HTML tags have two parts: an opening tag, which indicates where a piece of text begins, and a closing tag, which indicates where the piece of text ends. Closing tags start with a forward slash (/) just after the `<` symbol. Another type of tag, or element, is the empty element, which is different in that it doesn’t include a pair of matching opening and closing tags. Instead, an empty element consists of a single tag that starts with the `<` symbol and ends with the `>` symbol. You may see some empty elements end with `/>`, which is no longer required in HTML5 but did exist in previous versions of HTML. Following is a quick summary of these three types of tags, just to make sure you understand the role each plays: An opening tag is an HTML tag that indicates the start of an HTML command; the text affected by the command appears after the opening tag. Opening tags always begin with `<` and end with `>`, as in `<html>`. A closing tag is an HTML tag that indicates the end of an HTML command; the text affected by the command appears before the closing tag. Closing tags always begin with `</` and end with `>`, as in `</html>`. An empty tag or empty element is an HTML tag that issues an HTML command without enclosing any text in the page. Examples include `<br>` for line breaks and `<img>` for images."
"SAMS: Chapter 2 The attribute (`lang`), which is used to specify additional information related to the tag. In this case, it specifies that the language of the text within the HTML is English. If you are writing in a different language, replace the `en` (for English) with the language identifier relevant to you."
"SAMS: Chapter 2 The `<body>` tag in Listing 2.1 tells the web browser where the actual body text of the page begins, and `</body>` indicates where it ends. Everything between the `<body>` and `</body>` tags appears in the main display area of the web browser window, as shown in Figure 2.1. The very top of the browser window (refer to Figure 2.1) shows title text, which is any text that is located between `<title>` and `</title>`. The title text also identifies the page on the browser’s Bookmarks or Favorites menu, depending on which browser you use. It’s important to provide titles for your pages so that visitors to the page can properly bookmark them for future reference; search engines also use titles to provide a link to search results. You will use the `<body>` and `<title>` tag pairs in every HTML page you create because every web page needs a title and body text. You will also use the `<html>` and `<head>` tag pairs, which are the other two tags shown in Listing 2.1. Putting `<html>` at the very beginning of a document simply indicates that the document is a web page. The `</html>` at the end indicates that the web page is over. Within a page, there is a head section and a body section. Each section is identified by `<head>` and `<body>` tags. The idea is that information in the head of the page somehow describes the page but isn’t actually displayed by a web browser. Information placed in the body, however, is displayed by a web browser. The `<head>` tag always appears near the beginning of the HTML code for a page, just after the opening `<html>` tag. TIP: You might find it convenient to create and save a bare-bones page (also known as a skeleton page, or template) with just the DOCTYPE and opening and closing `<html>`, `<head>`, `<title>`, and `<body>` tags, similar to the document in Listing 2.1. You can then open that document as a starting point whenever you want to make a new web page and save yourself the trouble of typing all those obligatory tags every time. The `<title>` tag pair used to identify the title of a page appears within the head of the page, which means it is placed after the opening `<head>` tag and before the closing `</head>` tag. In upcoming lessons, you’ll learn about some other advanced header information that can go between `<head>` and `</head>`, such as style sheet rules for formatting the page. The `<p></p>` tag pair in Listing 2.1 encloses a paragraph of text. You should enclose your chunks of text in the appropriate container elements whenever possible; you’ll learn more about container elements as you move forward in your lessons."
"SAMS: Chapter 2 Using hyperlinks in web pages: There is no rule that says you have to include links in your web content, but you would be hard-pressed to find a website that doesn’t include at least one link either to another page on the same domain (for example, yourdomain.com), another domain, or even the same page. Links are all over the web, but it is important to understand a little bit of the “under the hood” details of links. When files are part of the same domain, you can link to them by simply providing the name of the file in the `href` attribute of the `<a>` tag. An attribute is an extra piece of information associated with a tag that provides further details about the tag. For example, the `href` attribute of the `<a>` tag identifies the address of the page to which you are linking. When you have more than a few pages, or when you start to have an organizational structure to the content in your site, you should put your files into directories (or folders, if you will) whose names reflect the content within them. For example, all your images could be in an images directory, company information could be in an about directory, and so on. Regardless of how you organize your documents within your own web server, you can use relative addresses, which include only enough information to find one page from another. A relative address describes the path from one web page to another, instead of a full (or absolute) Internet address which includes the full protocol (http or https) and the domain name (like www.yourdomain.com). As you recall from Chapter 1, “Understanding How the Web Works,” the document root of your web server is the directory designated as the top-level directory for your web content. In web addresses, that document root is represented by the forward slash (/). All subsequent levels of directories are separated by the same type of forward slash. Here’s an example: `/directory/subdirectory/subsubdirectory/`. CAUTION: The forward slash (/) is always used to separate directories in HTML. Don’t use the backslash (\, which is normally used in Windows) to separate your directories. Remember, everything on the Web moves forward, so use forward slashes."
"SAMS: Chapter 2 `href` stands for "hypertext reference." It is an attribute used in HTML to define the target of a hyperlink. This attribute specifies the URL or path to which the link points. Usage of `href`: 1. **Absolute URL:** An absolute URL specifies the complete path including the protocol (http https etc.) domain and the resource path. ```html <a href="https://www.example.com">Visit Example.com</a> ``` 2. **Relative URL:** A relative URL specifies the path relative to the current document's location. ```html <!-- Links to a file in the same directory --> <a href="about.html">About Us</a> <!-- Links to a file in a subdirectory --> <a href="products/list.html">Product List</a> <!-- Links to a file in the parent directory --> <a href="../contact.html">Contact</a> ``` 3. **Anchor within the same page:** It can also link to a specific section within the same page using an ID. ```html <a href="#section1">Go to Section 1</a> ... <h2 id="section1">Section 1</h2> ``` Key Points: Not limited to relative paths: The `href` attribute is not restricted to relative paths; it can use absolute URLs to link to external websites. Local and external links: It can link to both local resources (within the same website) and external resources (outside the website). Anchors: It can link to specific parts of the same document facilitating navigation within a page. By using the `href` attribute you can create links that navigate to different pages files or sections of a webpage providing a versatile way to build interconnected web content. Basically the id attributes are specified for HTML elements to identify them uniquely within a document and the href attributes in anchor tags (<a>) can link to these id attributes to create internal navigation within a web page. "
"SAMS: Chapter 2 / (root)
├── home
│   └── user
│       ├── documents
│       │   ├── file1.txt
│       │   └── file2.txt
│       ├── pictures
│       │   ├── image1.jpg
│       │   └── image2.png
│       └── downloads
└── etc
    ├── config1.conf
    └── config2.conf
A directory also known as a folder is a container in a computer's file system that can hold files other directories or both. Directories help organize files in a hierarchical structure making it easier to manage and access them. Key concepts of directories: The file system is structured like a tree with directories acting as branches and files as leaves. At the top of the hierarchy is the root directory which contains all other directories and files. The location of a file or directory in the file system is specified by a path which can be absolute or relative. An absolute path specifies the complete path from the root directory to the target file or directory (e.g. /home/user/documents/file.txt) while a relative path specifies the path relative to the current directory (e.g. documents/file.txt). Directories can contain other directories known as subdirectories creating multiple levels of organization. For example /home/user might contain subdirectories like documents pictures and downloads. Directories help keep related files together making it easier to find and manage files. For instance you might store all image files in an images directory and all HTML files in a web directory. Another example /directory/subdirectory/subsubdirectory/"
"SAMS: Chapter 2 Linking within a page using anchors: The `<a>` tag—the tag responsible for hyperlinks on the Web—got its id from the word anchor because a link serves as a designation for a spot in a web page. The `<a>` tag can be used to mark a spot on a page as an anchor enabling you to create a link that points to that exact spot. For example the top of a page could be marked as: `<a id="top"></a>`. The `<a>` tag normally uses the `href` attribute to specify a hyperlinked target. The `<a href>` is what you click and `<a id>` is where you go when you click there. In this example the `<a>` tag is still specifying a target but no actual link is created that you can see. Instead the `<a>` tag gives an id to the specific point on the page where the tag occurs. The `</a>` tag must be included and a unique id must be assigned to the `id` attribute but no text between `<a>` and `</a>` is necessary. <h1 id="top">Welcome to My Page</h1>
                                                        You can define an id attribute on any HTML element to uniquely identify it. This is often done to mark important sections of the page.                                                        <p id="intro">This is an introduction paragraph.</p>
                                                        <h2 id="section1">Section 1</h2>
                                                        <p>Content for section 1.</p>
                                                        <h2 id="section2">Section 2</h2>
                                                        <p>Content for section 2.</p>
                                                        <div id="footer">Footer content here.</div>
                                                        Creating Links to These IDs
                                                        You can create anchor tags that link to these IDs using the href attribute. The href attribute uses the # symbol followed by the ID value.
                                                        <a href="#top">Back to Top</a>
                                                        <a href="#intro">Go to Introduction</a>
                                                        <a href="#section1">Go to Section 1</a>
                                                        <a href="#section2">Go to Section 2</a>
                                                        <a href="#footer">Go to Footer</a>"
"SAMS: Chapter 2 Linking to external web content: The only difference between linking to pages within your own site and linking to external web content is that when linking outside your site you need to include the full address to that content. The full address includes the `http://` before the domain name and then the full pathname to the file (for example an HTML file an image file or a multimedia file). For example to include a link to Google from within one of your own web pages you would use this type of absolute addressing in your `<a>` link: `<a href="http://www.google.com/">Go to Google</a>`. CAUTION: As you might know you can leave out the `http://` at the front of any address when typing it into most web browsers. However you cannot leave that part out when you type an Internet address into an `<a href>` link on a web page. You can apply what you learned in previous sections to creating links to named anchors on other pages. Linked anchors are not limited to the same page. You can link to a named anchor on another page by including the address or filename followed by `#` and the anchor name. For example the following link would take you to an anchor named photos within the african.html page inside the elephants directory on the (fictional) domain www.takeme2thezoo.com: `<a href="http://www.takeme2thezoo.com/elephants/african.html#photos">Check out the African Elephant Photos!</a>`. If you are linking from another page already on the www.takeme2thezoo.com domain (because you are in fact the site maintainer) your link might simply be as follows: `<a href="/elephants/african.html#photos">Check out the African Elephant Photos!</a>`. The `http://` and the domain name would not be necessary in that instance as you have already learned. CAUTION: Be sure to include the `#` symbol only in `<a href>` link tags. Don’t put the `#` symbol in the `<a id>` tag; links to that name won’t work in that case. Definition: `#photos` is used to link to an element within an HTML document that has an `id` attribute with the value `photos`. How It Works: When you click a link like `<a href="#photos">` the browser scrolls to the element with `id="photos"` within the same page. If the link includes a URL like `<a href="african.html#photos">` it navigates to the specified page and scrolls to the element with `id="photos"` on that page."
"SAMS: Chapter 2 Linking to an Email Address: In addition to linking between pages and between parts of a single page the `<a>` tag enables you to link to email addresses. This is the simplest way to enable your web page visitors to talk back to you. Of course you could just provide visitors with your email address and trust them to type it into whatever email programs they use but that increases the likelihood for errors. By providing a clickable link to your email address you make it almost completely effortless for them to send you messages and eliminate the chance for typos. An HTML link to an email address looks like the following: `<a href="mailto:yourusername@yourdomain.com">Send me an email message.</a>`. The words "Send me an email message" will appear just like any other `<a>` link. Having taken this brief foray into the world of hyperlinks let’s get back to content organization and display. Note: 'mailto:' is a built in HTML feature for the anchor tag"
"SAMS: Chapter 2 Organizing a page with paragraphs and line breaks: When a web browser displays HTML pages it pays no attention to line endings or the number of spaces between words in the underlying text file itself. For example the poem appears with a single space between all words even though that’s not how it’s shown in the listing. This is because extra whitespace in HTML code is automatically reduced to a single space when rendered by the web browser. Additionally when the text reaches the edge of the browser window it automatically wraps to the next line no matter where the line breaks were in the original HTML file. When the HTML is viewed as a web page line and paragraph breaks appear only where there are <br> and <p> tags. HTML containing paragraph and line breaks: <!DOCTYPE html><html lang="en"><head><title>The Advertising Agency Song</title></head><body><p>When your client's hopping mad put his picture in the ad. If he still should prove refractory add a picture of his factory.</p><hr><p>When your client's hopping mad<br>put his picture in the ad.</p><p>If he still should prove refractory<br>add a picture of his factory.</p></body></html>. You must use HTML tags if you want to control where line and paragraph breaks actually appear. When text is enclosed within the <p></p> container tags a line break is assumed after the closing tag. In later chapters you’ll learn to control the height of the line break using CSS. The <br> tag forces a line break within a paragraph. Unlike the other tags you’ve seen so far <br> doesn’t require a closing </br> tag—this is one of those empty elements discussed earlier. The poem shows the <br> and <p> tags used to separate the lines and verses of an advertising agency song. You might have also noticed the <hr> tag in the listing which causes a horizontal rule line to appear on the page. Inserting a horizontal rule with the <hr> tag also causes a line break even if you don’t include a <br> tag along with it. Like <br> the <hr> horizontal rule tag is an empty element and therefore never gets a closing </hr> tag. "
"SAMS: Chapter 2 `<br>` and `<hr>` are not the same thing. They serve different purposes in HTML. `<br>` Tag: Purpose: The `<br>` tag is used to insert a single line break within a block of text. It is typically used within paragraphs or other block-level elements to create a new line. Usage: It is an empty element and does not require a closing tag. Example: `<p>This is the first line.<br>This is the second line.</p>`. `<hr>` Tag: Purpose: The `<hr>` tag is used to insert a horizontal rule (a horizontal line) that visually separates content. It is typically used to create a thematic break between sections of content. Usage: It is also an empty element and does not require a closing tag. Function: `<br>` creates a line break (like pressing Enter once in a text editor). `<hr>` creates a horizontal line that visually separates sections of content. Appearance: `<br>` has no visual representation other than the text moving to the next line. `<hr>` has a visual representation (a horizontal line across the page)."
"SAMS: Chapter 2 Organizing Your Content with Headings: When you browse web pages on the Internet you’ll notice that many of them have a heading at the top that appears larger and bolder than the rest of the text. Any text between the `<h1>` and `</h1>` tags will appear as a large heading. Additionally `<h2>` and `<h3>` make progressively smaller headings all the way down to `<h6>`. NOTE: By now you’ve probably caught on to the fact that HTML code is often indented by its author to reveal the relationship between different parts of the HTML document as well as for simple ease of reading. This indentation is entirely voluntary—you could just as easily run all the tags together with no spaces or line breaks and they would still look fine when viewed in a browser. The indentations are for you so that you can quickly look at a page full of code and understand how it fits together. Indenting your code is another good web design habit and ultimately makes your pages easier to maintain both for yourself and for anyone else who might pick up where you leave off. As you can see the HTML that creates headings couldn’t be simpler. In this example the phrase “My Widgets” is given the highest level of heading and is prominently displayed by surrounding it with the `<h1></h1>` tag pair. For a slightly smaller (level 2) heading—for information that is of lesser importance than the title—use the `<h2>` and `</h2>` tags around your text. For content that should appear even less prominently than a level 2 heading use the `<h3>` and `</h3>` tags around your text. However bear in mind that your headings should follow a content hierarchy; use only one level 1 heading have one (or more) level 2 headings after the level 1 heading use level 3 headings only after level 2 headings and so on. Do not fall into the trap of assigning headings to content just to make that content display a certain way such as by skipping headings. Instead ensure that you are categorizing your content appropriately (as a main heading a secondary heading and so on) while using display styles to make that text render a particular way in a web browser. You can also use `<h4>` `<h5>` and `<h6>` tags to make progressively less important headings. By default web browsers seldom show a noticeable difference between these headings and the `<h3>` headings—although you can control that with your own CSS. Also content usually isn’t displayed in such a manner that you’d need six levels of headings to show the content hierarchy. It’s important to remember the difference between a title and a heading. These two words are often interchangeable in day-to-day English but when you’re talking HTML `<title>` gives the entire page an identifying name that isn’t displayed on the page itself; it’s displayed only on the browser window’s title bar. The heading tags on the other hand cause some text on the page to be displayed with visual emphasis. There can be only one `<title>` per page and it must appear within the `<head>` and `</head>` tags; on the other hand you can have as many `<h1>` `<h2>` and `<h3>` headings as you want in any order that suits your fancy. However as I mentioned before you should use the heading tags to keep tight control over content hierarchy (logic dictates only one `<h1>` heading); do not use headings as a way to achieve a particular look because that’s what CSS is for. CAUTION: Don’t forget that anything placed in the head of a web page is not intended to be viewed on the page whereas everything in the body of the page is intended for viewing."
"SAMS: Chapter 2 Understanding Semantic Elements: HTML5 includes tags that enable you to enhance the semantics—the meaning—of the information you provide in your marked-up text. Instead of simply using HTML as a presentation language, as was the practice in the very early days when `<b>` for bold and `<i>` for italics was the norm, modern HTML has as one of its goals the separation of presentation and meaning. While using CSS to provide guidelines for presentation, composers of HTML can provide meaningful names within their markup for individual elements, not only through the use of IDs and class names (which you’ll learn about later in this chapter), but also through the use of semantic elements. Some of the semantic elements available in HTML5 follow: `<header></header>`—This might seem counterintuitive, but you can use multiple `<header>` tags within a single page. The `<header>` tag should be used as a container for introductory information, so it might be used only once in your page (likely at the top), but you also might use it several times if your page content is broken into sections. Any container element can have a `<header>` element; just make sure that you’re using it to include introductory information about the element it is contained within. `<footer></footer>`—The `<footer>` tag is used to contain additional information about its containing element (page or section), such as copyright and author information or links to related resources. `<nav></nav>`—If your site has navigational elements, such as links to other sections within a site or even within the page itself, these links go in a `<nav>` tag. A `<nav>` tag typically is found in the first instance of a `<header>` tag, just because people tend to put navigation at the top and consider it introductory information—but that is not a requirement. You can put your `<nav>` element anywhere (as long as it includes navigation), and you can have as many on a page as you need (often no more than two, but you might feel otherwise). `<section></section>`—The `<section>` tag contains anything that relates thematically; it can also contain a `<header>` tag for introductory information and possibly a `<footer>` tag for other related information. You can think of a `<section>` as carrying more meaning than a standard `<p>` (paragraph) or `<div>` (division) tag, which typically conveys no meaning at all; the use of `<section>` conveys a relationship between the content elements it contains. `<article></article>`—An `<article>` tag is like a `<section>` tag, in that it can contain a `<header>`, a `<footer>`, and other container elements such as paragraphs and divisions. But the additional meaning carried with the `<article>` tag is that it is, well, like an article in a newspaper or some other publication. Use this tag around blog posts, news articles, reviews, and other items that fit this description. One key difference between an `<article>` and a `<section>` is that an `<article>` is a standalone body of work, whereas a `<section>` is a thematic grouping of information. `<aside></aside>`—Use the `<aside>` tag to indicate secondary information; if the `<aside>` tag is within a `<section>` or an `<article>`, the relationship will be to those containers; otherwise, the secondary relationship will be to the overall page or site itself. It might make sense to think of the `<aside>` as a sidebar—either for all the content on the page or for an article or other thematic container of information."
"SAMS: Chapter 2 The <nav> element serves as a semantic indicator that the enclosed content is a section of navigational links. It doesn’t inherently change the appearance or behavior of the links but provides meaningful context about the role of the links in the webpage’s structure. "
"SAMS: Chapter 2 The `<nav>` element in HTML5 is a semantic tag used to define a section of a webpage that contains navigation links. These links can point to different sections within the same page, other pages on the same site, or external websites. The `<nav>` element helps search engines and other user agents understand the structure of your website and the purpose of the links it contains. Purpose of `<nav>`: Navigation Links: The primary purpose of the `<nav>` element is to group together the major navigational links on a webpage. Semantic Meaning: It provides semantic meaning to the navigation section, which helps with accessibility and search engine optimization (SEO). Key Points: Placement: The `<nav>` element is often placed within a `<header>` element, but it can appear anywhere on the page. Content: It should contain only the major navigational links for the site. It should not be used for all links on the page, only those related to navigation. Multiple `<nav>` Elements: It’s possible to have more than one `<nav>` element on a page if you have different sets of navigation links (e.g., main navigation, secondary navigation). Benefits of Using `<nav>`: Accessibility: Screen readers and other assistive technologies can identify the navigation section more easily, improving the user experience for those with disabilities. SEO: Search engines can better understand the structure and hierarchy of your website, potentially improving your search rankings. Organization: Helps in organizing the code by clearly defining the navigation section."
"SAMS: Chapter 2 Semantic Elements Visual Representation: 
                                            <header>
                                            <section>
                                    <nav>   <header>  <aside>
                                            <footer>
                                            <footer>"
"SAMS: Chapter 2 These semantic elements will become clearer as you practice using them. In general, using semantic elements is a good idea because they provide additional meaning not only for you and other designers and programmers reading and working with your markup, but also for machines. Web browsers and screen readers will respond to your semantic elements by using them to determine the structure of your document; screen readers will report a deeper meaning to users, thus increasing the accessibility of your material. One of the best ways to understand the HTML5 semantic elements is to see them in action, but that can be a little difficult when the primary purpose of these elements is to provide meaning rather than design. That’s not to say that you can’t add design to these elements—you most certainly can."
"SAMS: Chapter 2 Although you do not need to use semantic elements to create a valid HTML document even a minimal set is recommended so that web browsers and screen readers can determine the structure of your document. Screen readers are capable of reporting a deeper meaning to users thus increasing the accessibility of your material."
"SAMS: Chapter 2 Using `<header>` in Multiple Ways: At the most basic level the `<header>` element contains introductory information. That information might take the form of an actual `<h1>` (or other level) element or it might simply be a logo image or text contained within a `<p>` or `<div>` element. The meaning of the content should be introductory in nature to warrant its inclusion within a `<header></header>` tag pair. As you’ve seen in the examples so far in this lesson a common placement of a `<header>` element is at the beginning of a page. When it’s used in this way containing a logo or an `<h1>`-level title makes sense such as here: `<header><img src="acmewidgets.jpg" alt="ACME Widgets LLC"></header>` or even here: `<header><img src="acmewidgets.jpg" alt="ACME Widgets LLC"><h1>The finest widgets are made here!</h1></header>`. Both snippets are valid uses of `<header>` because the information contained within them is introductory to the page overall. As you’ve also seen in this chapter you are not limited to only one `<header>`. You can go crazy with your `<header>` elements as long as they are acting as containers for introductory information—Listing 2.4 showed the use of `<header>` elements for several `<section>` elements within an `<article>` and this is a perfectly valid use of the element: `<section><header><h3>Section 1 Heading</h3></header><p>Section 1 content here.</p></section><section><header><h3>Section 2 Heading</h3></header><p>Section 2 content here.</p></section>`. The `<header>` element can contain any other element in the flow content category of which it is also a member. This means that a `<header>` could contain a `<section>` element if you wanted and be perfectly valid markup. However when you are conceptualizing your content think about whether that sort of nesting makes sense before you go off and do it. NOTE: In general flow content elements are elements that contain text images or other multimedia embedded content; HTML elements fall into multiple categories. If you want to learn more about the categorization of elements into content models see http://www.w3.org/TR/2011/WD-html5-20110525/content-models.html. The only exceptions to the permitted content within `<header>` are that the `<header>` element cannot contain other `<header>` elements and it cannot contain a `<footer>` element. Similarly the `<header>` element cannot be contained within a `<footer>` element."
"SAMS: Chapter 2 Understanding the `<section>` Element: The `<section>` element has a simple definition: It is a “generic section of a document” that is also a “thematic grouping of content, typically with a heading.” That sounds pretty simple to me, and probably does to you as well. So you might be surprised to find that if you type “difference between section and article in HTML5” in your search engine of choice, you’ll find tens of thousands of entries talking about the differences because the definitions trip people up all the time. We first discuss the `<section>` element and then cover the `<article>` element—and hopefully avoid any of the misunderstandings that seem to plague new web developers. In Listing 2.4, you saw a straightforward example of using `<section>` within an `<article>` (repeated here). In this example, you can easily imagine that the `<section>`s contain a “thematic grouping of content,” which is supported by the fact that they each have a heading: `<article><header><h2>Article Heading</h2></header><section><header><h3>Section 1 Heading</h3></header><p>Section 1 content here.</p></section><section><header><h3>Section 2 Heading</h3></header><p>Section 2 content here.</p></section><footer><p>Article footer goes here.</p></footer></article>` But here’s an example of a perfectly valid use of `<section>` with no `<article>` element in sight: `<section><header><h1>Super Heading</h1></header><p>Super content!</p></section>`. So what’s a developer to do? Let’s say you have some generic content that you know you want to divide into sections with their own headings. In that case, use `<section>`. If you need to only visually delineate chunks of content (such as with paragraph breaks) that do not require additional headings, then `<section>` isn’t for you—use `<p>` or `<div>` instead. Because the `<section>` element can contain any other flow content element, and can be contained within any other flow content element (except the `<address>` element, discussed later in this chapter), it’s easy to see why, without other limitations and with generic guidelines for use, the `<section>` element is sometimes misunderstood."
"SAMS: Chapter 2 Using `<article>` Appropriately: Personally, I believe that a lot of the misunderstanding regarding the use of `<section>` versus `<article>` has to do with the name of the `<article>` element. When I think of an article, I think specifically about an article in a newspaper or a magazine. I don’t naturally think “any standalone body of work,” which is how the `<article>` element is commonly defined. The HTML5 recommended specification defines it as “a complete, or self-contained, composition in a document, page, application, or site and that is, in principle, independently distributable or reusable,” such as “a forum post, a magazine or newspaper article, a blog entry, a user-submitted comment, an interactive widget or gadget, or any other independent item of content.” In other words, an `<article>` element could be used to contain the entire page of a website (whether or not it is an article in a publication), an actual article in a publication, a blog post anywhere and everywhere, part of a threaded discussion in a forum, a comment on a blog post, and as a container that displays the current weather in your city. It’s no wonder there are tens of thousands of results for a search on “difference between section and article in HTML5.” A good rule of thumb when you’re trying to figure out when to use `<article>` and when to use `<section>` is simply to answer the following question: Does this content make sense on its own? If so, then no matter what the content seems to be to you (for example, a static web page, not an article in the New York Times), start by using the `<article>` element. If you find yourself breaking it up, do so in `<section>`s. And if you find yourself thinking that your “article” is, in fact, part of a greater whole, then change the `<article>` tags to `<section>` tags, find the beginning of the document, and surround it from there with the more appropriately placed `<article>` tag at a higher level."
"SAMS: Chapter 2 Implementing the `<nav>` Element: The `<nav>` element seems so simple (`<nav>` implies navigation) and it ultimately is—but it can also be used incorrectly. In this section you’ll learn some basic uses and also some incorrect uses to avoid. If your site has any navigational elements at all either sitewide or within a long page of content you have a valid use for the `<nav>` element. For that sitewide navigation you typically find a `<nav>` element within the primary `<header>` element; you are not required to put it there but if you want your navigational content to be introductory (and omnipresent in your template) you can easily make a case for your primary `<nav>` element to appear within the primary `<header>`. More important that is valid HTML (as is `<nav>` outside a `<header>`) because a `<nav>` element can appear within any flow content as well as contain any flow content. The following code snippet shows the main navigational links of a website placed within a `<header>` element: `<header><img src="acmewidgets.jpg" alt="ACME Widgets LLC"/><h1>The finest widgets are made here!</h1><nav><ul><li><a href="#">About Us</a></li><li><a href="#">Products</a></li><li><a href="#">Support</a></li><li><a href="#">Press</a></li></ul></nav></header>`. You are not limited to a single `<nav>` element in your documents which is good for site developers who create templates that include both primary and secondary navigation. For example you might see horizontal primary navigation at the top of a page (often contained within a `<header>` element) and then vertical navigation in the left column of a page representing the secondary pages within the main section. In that case you simply use a second `<nav>` element not contained within the `<header>` placed and styled differently to delineate the two types visually in addition to semantically. Remember the `<nav>` element is used for major navigational content—primary and secondary navigation both count as does the inclusion of tables of contents within a page. For good and useful semantic use of the `<nav>` element do not simply apply it to every link that allows a user to navigate anywhere. Note that I said “good and useful” semantic use not necessarily “valid” use—it’s true that you could apply `<nav>` to any list of links and it would be valid according to the HTML specification because links are flow content. But it wouldn’t be particularly useful—it wouldn’t add meaning—to surround a list of links to social media sharing tools with the `<nav>` element."
"SAMS: Chapter 2 When to Use `<aside>`: As you’ll see by the number of tips and notes from me throughout this book I’m a big fan of the type of content that is most appropriately marked up within the `<aside>` element. The `<aside>` element is meant to contain any content that is tangentially related to the content around it—additional explanation links to related resources pull quotes helper text and so on. You might think of the `<aside>` element as a sidebar but be careful not to think of it only as a visual sidebar or a column on the side of a page where you can stick anything and everything you want whether or not it’s related to the content or site at hand. In Figure 2.8 you can see how content in an `<aside>` is used to create a pull quote or a content excerpt that is specifically set aside to call attention to it. The `<aside>` in this case is used to highlight an important section of the text but it could also have been used to define a term or link to related documents. When determining whether to use the `<aside>` element think about the content you want to add. Is it related directly to the content in which the `<aside>` would be contained such as a definition of terms used in an article or a list of related links for the article? If your answer is an easy yes that’s great! Use `<aside>` to your heart’s content. If you’re thinking of including an `<aside>` outside a containing element that is itself full of content just make sure that the content of the `<aside>` is reasonably related to your site overall and that you’re not just using the `<aside>` element for visual effect."
"SAMS: Chapter 2 Using `<footer>` Effectively: The counterpart to the `<header>` element the `<footer>` element contains additional information about its containing element. The most common use of the `<footer>` element is to contain copyright information at the bottom of a page such as here: `<footer><p>&copy; 2017 Acme Widgets LLC. All Rights Reserved.</p></footer>`. Similar to the `<header>` element the `<footer>` element can contain any other element in the flow content category of which it is also a member with the exception of other `<footer>` or `<header>` elements. Additionally a `<footer>` element cannot be contained within an `<address>` element but a `<footer>` element can contain an `<address>` element—in fact a `<footer>` element is a common location for an `<address>` element to reside in. Placing useful `<address>` content within a `<footer>` element is one of the most effective uses of the `<footer>` element (not to mention the `<address>` element) because it provides specific contextual information about the page or section of the page to which it refers. The following snippet shows a use of `<address>` within `<footer>`: `<footer><p>&copy; 2017 Acme Widgets LLC. All Rights Reserved.</p><p>Copyright Issues? Contact:</p><address>Our Lawyer<br>123 Main Street<br>Somewhere CA 95128<br><a href="mailto:lawyer@example.com">lawyer@example.com</a></address></footer>`. As with the `<header>` element you are not limited to only one `<footer>`. You can use as many `<footer>` elements as you need as long as they are containers for additional information about the containing element—Listing 2.4 showed the use of `<footer>` elements for both a page and an `<article>` both of which are valid."
"SAMS: Chapter 2 How CSS Works: In the preceding sections you learned the basics of HTML including how to set up a skeletal HTML template for all your web content use hyperlinks and generally organize your content. In this section you’ll learn the basics of fine-tuning the visual display of your web content using Cascading Style Sheets (CSS). The concept behind style sheets is simple: You create a style sheet document that specifies the fonts colors spacing and other characteristics that establish a unique look for a website. You then link every page that should have that look to the style sheet instead of specifying all those styles repeatedly in each separate document. Therefore when you decide to change your official corporate typeface or color scheme you can modify all your web pages at once just by changing one or two entries in your style sheet—you don’t have to change them in all your static web files. So a style sheet is a grouping of formatting instructions that control the appearance of several HTML pages at once. Style sheets enable you to set a great number of formatting characteristics including exact typeface controls letter and line spacing and margins and page borders just to name a few. Style sheets also enable you to specify sizes and other measurements in familiar units such as inches millimeters points and picas. In addition you can use style sheets to precisely position graphics and text anywhere on a web page either at specific coordinates or relative to other items on the page. In short style sheets bring a sophisticated level of display to the Web—and they do so if you’ll pardon the expression with style. NOTE: If you have three or more web pages that share (or should share) similar formatting and fonts you might want to create a style sheet for them as you read this chapter. Even if you choose not to create a complete style sheet you’ll find it helpful to apply styles to individual HTML elements directly within a web page. A style rule is a formatting instruction that can be applied to an element on a web page such as a paragraph of text or a link. Style rules consist of one or more style properties and their associated values. An internal style sheet is placed directly within a web page whereas an external style sheet exists in a separate document and is simply linked to a web page via a special tag—more on this tag in a moment. The cascading part of the name Cascading Style Sheets refers to the manner in which style sheet rules are applied to elements in an HTML document. More specifically styles in a CSS style sheet form a hierarchy in which more specific styles override more general styles. It is the responsibility of CSS to determine the precedence of style rules according to this hierarchy which establishes a cascading effect. If that sounds a bit confusing just think of the cascading mechanism in CSS as being similar to genetic inheritance in which general traits are passed from parents to a child but more specific traits are entirely unique to the child. Base-style rules are applied throughout a style sheet but can be overridden by more specific style rules. NOTE: You might notice that I use the term element a fair amount in this chapter (and I do in the rest of the book for that matter). An element is simply a piece of information (content) in a web page such as an image a paragraph or a link. Tags are used to mark up elements and you can think of an element as a tag complete with descriptive information (attributes text images and so on) within the tag. A quick example should clear things up. Take a look at the following code to see whether you can tell what’s going on with the color of the text: `<div style="color:green"> This text is green. <p style="color:blue">This text is blue.</p> <p>This text is still green.</p> </div>`. In the preceding example the color green is applied to the `<div>` tag via the color style property. Therefore the text in the `<div>` tag is colored green. Because both `<p>` tags are children of the `<div>` tag the green text style cascades down to them. However the first `<p>` tag overrides the color style and changes it to blue. The end result is that the first line (not surrounded by a paragraph tag) is green the first official paragraph is blue and the second official paragraph retains the cascaded green color. If you made it through that description on your own and came out on the other end unscathed congratulations—that’s half the battle. Understanding CSS isn’t like understanding rocket science—the more you practice the more it will become clear. The real trick is developing the aesthetic design sense that you can then apply to your online presence through CSS. Like many web technologies CSS has evolved over the years. The original version of CSS known as Cascading Style Sheets Level 1 (CSS1) was created in 1996. The later CSS2 standard was created in 1998 and CSS2 is still in use today; all modern web browsers support CSS2. The latest version of CSS is CSS3 which builds on the strong foundation laid by its predecessors but adds advanced functionality to enhance the online experience. In the following sections you’ll learn core CSS and throughout the rest of the book when CSS is discussed or used I’ll refer to CSS3. The rest of this chapter explains the basics of putting CSS to good use but it’s not a reference for all things CSS. Nor is the rest of this book which will show plenty of examples of basic CSS in use as you learn to build dynamic web applications. However you can find a developer-oriented guide to CSS at https://developer.mozilla.org/en-US/docs/Web/CSS that gets into excruciating detail regarding everything you can do with CSS. This guide can be an invaluable reference to you as you continue on your web development journey."
"SAMS: Chapter 2 A Basic Style Sheet: Despite their power style sheets are simple to create. Consider the web pages shown in Figures 2.9 and 2.10. These pages share several visual properties that can be put into a common style sheet: They use a large bold Verdana font for the headings and a normal-size and normal-weight Verdana font for the body text. They use an image named logo.gif floating within the content and on the right side of the page. All text is black except for subheadings which are purple. They have margins on the left side and at the top. They include vertical space between lines of text. They include a footer that is centered and in small print. This page uses a style sheet to fine-tune the appearance and spacing of the text and images. This page uses the same style sheet as the one in Figure 2.9 thus maintaining a consistent look and feel. Listing 2.5 shows the CSS used in a style sheet to specify these properties. LISTING 2.5 A Single External Style Sheet: `body { font-size: 10pt; font-family: Verdana Geneva Arial Helvetica sans-serif; color: black; line-height: 14pt; padding-left: 5pt; padding-right: 5pt; padding-top: 5pt; } h1 { font: 14pt Verdana Geneva Arial Helvetica sans-serif; font-weight: bold; line-height: 20pt; } p.subheader { font-weight: bold; color: #593d87; } img { padding: 3pt; float: right; } a { text-decoration: none; } a:link a:visited { color: #8094d6; } a:hover a:active { color: #FF9933; } footer { font-size: 9pt; font-style: italic; line-height: 12pt; text-align: center; padding-top: 30pt; }`. This might initially appear to be a lot of code but if you look closely you’ll see that there isn’t a lot of information on each line of code. It’s fairly standard to place individual style rules on their own line to help make style sheets more readable but that is a personal preference; you could put all the rules on one line as long as you kept using the semicolon to separate each rule (more on that in a bit). Speaking of code readability perhaps the first thing you noticed about this style sheet code is that it doesn’t look anything like normal HTML code. CSS uses a syntax all its own to specify style sheets. Of course the listing includes some familiar HTML tags (although not all tags require an entry in the style sheet). As you might guess body h1 p img a and footer in the style sheet refer to the corresponding tags in the HTML documents to which the style sheet will be applied. The curly braces after each tag name describe how all content within that tag should appear. In this case the style sheet says that all body text should be rendered at a size of 10 points in the Verdana font (if possible) and with the color black with 14 points between lines. If the user does not have the Verdana font installed the list of fonts in the style sheet represents the order in which the browser should search for fonts to use: Geneva then Arial and then Helvetica. If the user has none of those fonts the browser uses whatever default sans-serif font is available. Additionally the page should have left right and top padding of 5 points each. Any text within an `<h1>` tag should be rendered in boldface Verdana at a size of 14 points. Moving on any paragraph that uses only the `<p>` tag inherits all the styles indicated by the body element. However if the `<p>` tag uses a special class named subheader the text appears bold and in the color #593d87 (a purple color). The pt after each measurement in Listing 2.5 means points (there are 72 points in an inch). If you prefer you can specify any style sheet measurement in inches (in) centimeters (cm) pixels (px) or “widths of a letter m” which are called ems (em). You might have noticed that each style rule in the listing ends with a semicolon (;). Semicolons are used to separate style rules from each other. It is therefore customary to end each style rule with a semicolon so that you can easily add another style rule after it. Review the remainder of the style sheet in Listing 2.5 to see the presentation formatting applied to additional tags. NOTE: You can specify font sizes as large as you like with style sheets although some display devices and printers do not correctly handle fonts larger than 200 points. To link this style sheet to HTML documents include a `<link>` tag in the `<head>` section of each document. Listing 2.6 shows the HTML code for the page shown in Figure 2.9. It contains the following `<link>` tag: `<link rel="stylesheet" type="text/css" href="styles.css">`. This assumes that the style sheet is stored under the name styles.css in the same folder as the HTML document. As long as the web browser supports style sheets—and all modern browsers do—the properties specified in the style sheet will apply to the content in the page without the need for any special HTML formatting code. This meets one of the goals of HTML which is to provide a separation between the content in a web page and the specific formatting required to display that content. LISTING 2.6 HTML Code for the Page Shown in Figure 2.9: `<!DOCTYPE html> <html lang="en"> <head> <title>About BAWSI</title> <link rel="stylesheet" type="text/css" href="styles.css"> </head> <body> <section> <header> <h1>About BAWSI</h1> </header> <p><img src="logo.gif" alt="BAWSI logo">The Bay Area Women's Sports Initiative (BAWSI) is a public benefit nonprofit corporation with a mission to create programs and partnerships through which women athletes bring health hope and wholeness to our community. Founded in 2005 by Olympic and World Cup soccer stars Brandi Chastain and Julie Foudy and Marlene Bjornsrud former general manager of the San Jose CyberRays women's professional soccer team BAWSI provides a meaningful path for women athletes to become a more visible and valued part of the Bay Area sports culture.</p> <p class="subheader">BAWSI's History</p> <p>The concept of BAWSI was inspired by one of the most spectacular achievements in women's sports history and born out of one its biggest disappointments… </p> <p><a href="secondpage.html">[continue reading]</a></p> </section> <footer> Copyright &copy; 2005-2017 BAWSI (www.bawsi.org). All rights reserved. Used with permission. </footer> </body> </html>`. TIP: In most web browsers you can view the style rules in a style sheet by opening the .css file and choosing Notepad or another text editor as the helper application to view the file. (To determine the name of the .css file look at the HTML source of any web page that links to it.) To edit your own style sheets just use a text editor. The code in Listing 2.6 is interesting because it contains no formatting of any kind. In other words nothing in the HTML code dictates how the text and images are to be displayed—no colors no fonts nothing. Yet the page is carefully formatted and rendered to the screen thanks to the link to the external style sheet styles.css. The real benefit to this approach is that you can easily create a site with multiple pages that maintains a consistent look and feel. And you have the benefit of isolating the visual style of the page to a single document (the style sheet) so that one change impacts all pages. NOTE: Not every browser’s support of CSS is flawless. To find out how major browsers compare to each other in terms of CSS support take a look at these websites: http://www.quirksmode.org/css/contents.html and http://caniuse.com."
"SAMS: Chapter 2 A CSS Style Primer: You now have a basic knowledge of CSS style sheets and how they are based on style rules that describe the appearance of information in web pages. The next few sections of this chapter provide a quick overview of some of the most important style properties and enable you to get started using CSS in your own style sheets. CSS includes various style properties that are used to control fonts colors alignment and margins to name just a few. The style properties in CSS can be generally grouped into two major categories: Layout properties which consist of properties that affect the positioning of elements on a web page such as margins padding and alignment; Formatting properties which consist of properties that affect the visual display of elements within a website such as the font type size and color."
"SAMS: Chapter 2 Basic Layout Properties: CSS layout properties determine how content is placed on a web page. One of the most important layout properties is the display property which describes how an element is displayed with respect to other elements. The display property has four basic values: block—The element is displayed on a new line as in a new paragraph; list-item—The element is displayed on a new line with a list-item mark (bullet) next to it; inline—The element is displayed inline with the current paragraph; none—The element is not displayed it is hidden. NOTE: The display property relies on a concept known as relative positioning which means that elements are positioned relative to the location of other elements on a page. CSS also supports absolute positioning which enables you to place an element at an exact location on a page independent of other elements. You’ll learn more about both of these types of positioning in Chapter 3 “Understanding the CSS Box Model and Positioning.” Understanding the display property is easier if you visualize each element on a web page occupying a rectangular area when displayed—the display property controls the manner in which this rectangular area is displayed. For example the block value results in the element being placed on a new line by itself whereas the inline value places the element next to the content just before it. The display property is one of the few style properties that can be applied in most style rules. Following is an example of how to set the display property: display: block;. You control the size of the rectangular area for an element with the width and height properties. As with many size-related CSS properties width and height property values can be specified in several different units of measurement: in—Inches; cm—Centimeters; mm—Millimeters; %—Percentage; px—Pixels; pt—Points. You can mix and match units however you choose within a style sheet but it’s generally a good idea to be consistent across a set of similar style properties. For example you might want to stick with points for font properties and pixels for dimensions. Following is an example of setting the width of an element using pixel units: width: 200px;."
"SAMS: Chapter 2 Basic Formatting Properties: CSS formatting properties are used to control the appearance of content on a web page as opposed to controlling the physical positioning of the content. One of the most popular formatting properties is the border property which establishes a visible boundary around an element with a box or partial box. Note that a border is always present in that space is always left for it but the border does not appear in a way that you can see unless you give it properties that make it visible (like a color). The following border properties provide a means of describing the borders of an element: border-width—The width of the border edge; border-color—The color of the border edge; border-style—The style of the border edge; border-left—The left side of the border; border-right—The right side of the border; border-top—The top of the border; border-bottom—The bottom of the border; border—All the border sides. The border-width property establishes the width of the border edge. It is often expressed in pixels as the following code demonstrates: border-width: 5px;. Not surprisingly the border-color and border-style properties set the border color and style. Following is an example of how these two properties are set: border-color: blue; border-style: dotted;. The border-style property can be set to any of the following basic values: solid—A single-line border; double—A double-line border; dashed—A dashed border; dotted—A dotted border; groove—A border with a groove appearance; ridge—A border with a ridge appearance; inset—A border with an inset appearance; outset—A border with an outset appearance; none—No border; hidden—Effectively the same as none in that no border is displayed but if two elements are next to each other with collapsed space between them hidden ensures that a collapsed visible border does not show within the area of the element with a hidden border. The default value of the border-style property is none which is why elements don’t have a border unless you set the border property to a different style. Although solid is the most common border style you will also see the other styles in use. The border-left, border-right, border-top, and border-bottom properties enable you to set the border for each side of an element individually. If you want a border to appear the same on all four sides you can use the single border property by itself which expects the following styles separated by a space: border-width, border-style, and border-color. Following is an example of using the border property to set a border that consists of two (double) red lines that are a total of 10 pixels in width: border: 10px double red;. Whereas the color of an element’s border is set with the border-color property the color of the inner region of an element is set using the color and background-color properties. The color property sets the color of text in an element (foreground) and the background-color property sets the color of the background behind the text. Following is an example of setting both color properties to predefined colors: color: black; background-color: orange;. You can also assign custom colors to these properties by specifying the colors in hexadecimal or as RGB (Red Green Blue) decimal values: background-color: #999999; color: rgb(0,0,255);. You can also control the alignment and indentation of web page content without too much trouble. This is accomplished with the text-align and text-indent properties as the following code demonstrates: text-align: center; text-indent: 12px;. When you have an element properly aligned and indented you might be interested in setting its font. The following basic font properties set the various parameters associated with fonts: font-family—The family of the font; font-size—The size of the font; font-style—The style of the font (normal or italic); font-weight—The weight of the font (normal lighter bold bolder and so on). The font-family property specifies a prioritized list of font family names. A prioritized list is used instead of a single value to provide alternatives in case a font isn’t available on a given system. The font-size property specifies the size of the font using a unit of measurement often in points. Finally the font-style property sets the style of the font and the font-weight property sets the weight of the font. Following is an example of setting these font properties: font-family: Arial, sans-serif; font-size: 36pt; font-style: italic; font-weight: normal;. Now that you know a whole lot more about style properties and how they work refer to Listing 2.5 and see whether it makes a bit more sense. Here’s a recap of the style properties used in that style sheet which you can use as a guide for understanding how it works: font—Lets you set many font properties at once. You can specify a list of font names separated by commas; if the first is not available the next is tried and so on. You can also include the words bold and/or italic and a font size. Alternatively you can set each of these font properties separately with font-family, font-size, font-weight, and font-style. line-height—Also known in the publishing world as leading. This sets the height of each line of text usually in points. color—Sets the text color using the standard color names or hexadecimal color codes. text-decoration—Is useful for turning off link underlining; simply set it to none. The values of underline, italic, and line-through are also supported. text-align—Aligns text to the left, right, or center along with justifying the text with a value of justify. padding—Adds padding to the left, right, top, and bottom of an element; this padding can be in measurement units or a percentage of the page width. Use padding-left and padding-right if you want to add padding to the left and right of the element independently. Use padding-top or padding-bottom to add padding to the top or bottom of the element as appropriate. You’ll learn a bit more about these style properties in Chapter 3."
"SAMS: Chapter 2 Using Style Classes: Whenever you want some of the text on your pages to look different from the other text you can create what amounts to a custom-built HTML tag. Each type of specially formatted text you define is called a style class which is a custom set of formatting specifications that can be applied to any element in a web page. Before showing you a style class I need to take a quick step back and clarify some CSS terminology. First off a CSS style property is a specific style that you can assign a value such as color or font-size. You associate a style property and its respective value with elements on a web page by using a selector. A selector is used to identify tags on a page to which you apply styles. Following is an example of a selector a property and a value all included in a basic style rule: `h1 { font: 36pt Courier; }`. In this code h1 is the selector font is the style property and 36pt Courier is the value. The selector is important because it means that the font setting will be applied to all h1 elements in the web page. But maybe you want to differentiate between some of the h1 elements—what then? The answer lies in style classes. Suppose you want two different kinds of `<h1>` headings for use in your documents. You create a style class for each one by putting the following CSS code in a style sheet: `h1.silly { font: 36pt 'Comic Sans'; } h1.serious { font: 36pt Arial; }`. Notice that these selectors include a period (.) after h1 followed by a descriptive class name. To choose between the two style classes use the class attribute like this: `<h1 class="silly">Marvin's Munchies Inc. </h1><p>Text about Marvin's Munchies goes here. </p>`. Or you could use this: `<h1 class="serious">MMI Investor Information</h1><p>Text for business investors goes here.</p>`. When referencing a style class in HTML code simply specify the class name in the class attribute of an element. In the preceding example the words Marvin's Munchies Inc. would appear in a 36-point Comic Sans font assuming that you included a `<link>` to the style sheet at the top of the web page and that the user has the Comic Sans font installed. The words MMI Investor Information would appear in the 36-point Arial font instead. You can see another example of classes in action in Listing 2.5; look for the specialtext `<p>` class. What if you want to create a style class that can be applied to any element instead of just headings or some other particular tag? In your CSS simply use a period (.) followed by any style class name you make up and any style specifications you choose. That class can specify any number of font spacing and margin settings all at once. Wherever you want to apply your custom tag in a page just use an HTML tag plus the class attribute followed by the class name you created. For example the style sheet in Listing 2.5 includes the following style class specification: `p.specialtext { font-weight: bold; color: #593d87; }`. This style class is applied in Listing 2.6 with the following tag: `<p class="specialtext">`. TIP: You might have noticed a change in the coding style when a style rule includes multiple properties. For style rules with a single style you’ll commonly see the property placed on the same line as the rule like this: `p.specialtext { font-weight: bold; }`. However when a style rule contains multiple style properties it’s much easier to read and understand the code if you list the properties one per line like this: `p.specialtext { font-weight: bold; color: #593d87; }`. Everything between that tag and the closing `</p>` tag in Listing 2.6 appears in bold purple text. If no element selector were present in your style sheet meaning that the rule looked like this: `.specialtext { font-weight: bold; color: #593d87; }`. Then any element could refer to specialtext and have the text rendered as bold purple not just a `<p>` element. What makes style classes so valuable is how they isolate style code from web pages effectively enabling you to focus your HTML code on the actual content in a page not on how it is going to appear on the screen. Then you can focus on how the content is rendered to the screen by fine-tuning the style sheet. You might be surprised by how a relatively small amount of code in a style sheet can have significant effects across an entire website. This makes your pages much easier to maintain and manipulate."
"SAMS: Chapter 2 Using Style IDs: When you create custom style classes you can use those classes as many times as you like—they are not unique. However in some instances you want precise control over unique elements for layout or formatting purposes (or both). In such instances look to IDs instead of classes. A style ID is a custom set of formatting specifications that can be applied to only one element in a web page. You can use IDs across a set of pages but only once per time within each page. For example suppose you have a title within the body of all your pages. Each page has only one title but all the pages themselves include one instance of that title. Following is an example of a selector with an ID indicated plus a property and a value: `p#title {font: 24pt Verdana Geneva Arial sans-serif}`. Notice that this selector includes a hash mark or pound sign (#) after p followed by a descriptive ID name. When referencing a style ID in HTML code simply specify the ID name in the id attribute of an element like so: `<p id="title">Some Title Goes Here</p>`. Everything between the opening and closing `<p>` tags will appear in 24-point Verdana text—but only once on any given page. You often see style IDs used to define specific parts of a page for layout purposes such as a header area footer area main body area and so on. These types of areas in a page appear only once per page so using an ID rather than a class is the appropriate choice."
"SAMS: Chapter 2 Internal Style Sheets and Inline Styles: In some situations you want to specify styles that will be used in only one web page. You can enclose a style sheet between `<style>` and `</style>` tags and include it directly in an HTML document. Style sheets used in this manner must appear in the `<head>` of an HTML document. No `<link>` tag is needed and you cannot refer to that style sheet from any other page (unless you copy it into the beginning of that document too). This kind of style sheet is known as an internal style sheet as you learned earlier in the chapter. Listing 2.7 shows an example of how you might specify an internal style sheet: `<!DOCTYPE html><html lang="en"><head><title>Some Page</title><style type="text/css">footer {font-size: 9pt; line-height: 12pt; text-align: center;}</style></head><body>…<footer>Copyright 2017 Acme Products Inc.</footer></body></html>`. In the listing code the footer style class is specified in an internal style sheet that appears in the head of the page. The style class is now available for use within the body of this page and only within this page. In fact it is used in the body of the page to style the copyright notice. Internal style sheets are handy if you want to create a style rule that is used multiple times within a single page. However in some instances you might need to apply a unique style to one particular element. This calls for an inline style rule which enables you to specify a style for only a small part of a page such as an individual element. For example you can create and apply a style rule within a `<p>` `<div>` or `<span>` tag via the style attribute. This type of style is known as an inline style because it is specified right there in the middle of the HTML code. NOTE: The `<span>` and `</span>` tags are dummy tags that do nothing in and of themselves except specify a range of content to apply any style attributes that you add. The only difference between `<div>` and `<span>` is that `<div>` is a block element and therefore forces a line break whereas `<span>` is an inline element and doesn’t force a break. Therefore you should use `<span>` to modify the style of any portion of text that is to appear in the middle of a sentence or paragraph without any line break. Here’s how a sample style attribute might look: `<p style="color:green">This text is green but <span style="color:red">this text is red.</span>Back to green again but…</p><p>…now the green is over and we're back to the default color for this page.</p>`. This code makes use of the `<span>` tag to show how to apply the color style property in an inline style rule. In fact both the `<p>` tag and the `<span>` tag in this example use the color property as an inline style. What’s important to understand is that the `color:red` style property overrides the `color:green` style property for the text between the `<span>` and `</span>` tags. Then in the second paragraph neither of the color styles applies because it is a completely new paragraph that adheres to the default color of the entire page. CAUTION: Using inline styles isn’t considered a best practice when used beyond page-level debugging or beyond trying out new things in a controlled setting. The best practice of all is having your pages link to a centrally maintained style sheet so that changes are immediately reflected in all pages that use it."
"SAMS: Chapter 2 Summary: Summary: This chapter introduced the basics of what web pages are and how they work. You learned that coded HTML commands are included in a text file and you saw that typing HTML text yourself is better than using a graphical editor to create HTML commands for you—especially when you’re learning HTML. You were introduced to the most basic and important HTML tags. By adding these coded commands to any plain-text document you can quickly transform it into a bona fide web page. You learned that the first step in creating a web page is to put a few obligatory HTML tags at the beginning and end including adding a title for the page. You can then mark where paragraphs and lines end and add horizontal rules and headings if you want them. You also got a taste of some of the semantic tags in HTML5 which are used to provide additional meaning by delineating the types of content your pages contain (not just the content itself). Table 2.1 summarizes the basic HTML tags introduced in this chapter. Beyond HTML you learned that a style sheet can control the appearance of many HTML pages at once. It can also give you extremely precise control over the typography spacing and positioning of HTML elements. You also learned that by adding a style attribute to almost any HTML tag you can control the style of any part of an HTML page without referring to a separate style sheet document. You learned about three main approaches to including style sheets in your website: a separate style sheet file with the extension .css that is linked to in the `<head>` of your documents a collection of style rules placed in the head of the document within the `<style>` tag and rules placed directly in an HTML tag via the style attribute (although the latter is not a best practice for long-term use). Table 2.2 summarizes tags with attributes discussed in this chapter. TABLE 2.1 HTML Tags Covered in this Chapter Tag | Function <html>…</html> | Encloses the entire HTML document <head>…</head> | Encloses the head of the HTML document. Used within the `<html>` tag pair <title>…</title> | Indicates the title of the document. Used within the `<head>` tag pair <body>…</body> | Encloses the body of the HTML document. Used within the `<html>` tag pair <p>…</p> | Encloses a paragraph; skips a line between paragraphs <br> | Indicates a line break <hr> | Displays a horizontal rule line <h1>…</h1> | Encloses a first-level heading <h2>…</h2> | Encloses a second-level heading <h3>…</h3> | Encloses a third-level heading <h4>…</h4> | Encloses a fourth-level heading <h5>…</h5> | Encloses a fifth-level heading <h6>…</h6> | Encloses a sixth-level heading <header>…</header> | Contains introductory information <footer>…</footer> | Contains supplementary material for its containing element (commonly a copyright notice or author information) <nav>…</nav> | Contains navigational elements <section>…</section> | Contains thematically similar content such as a chapter of a book or a section of a page <article>…</article> | Contains content that is a standalone body of work such as a news article <aside>…</aside> | Contains secondary information for its containing element <address>…</address> | Contains address information related to its nearest `<article>` or `<body>` element often contained within a `<footer>` element TABLE 2.2 HTML Tags with Attributes Covered in This Chapter Tag/Attributes | Function Tag <a> | Indicates a hyperlink to a position in the current document or to another document Attributes href="url" | The address of the linked content Tag <style>…</style> | Allows an internal style sheet to be included within a document. Used between `<head>` and `</head>` Attribute type="contenttype" | The Internet content type. (Always "text/css" for a CSS style sheet.) Tag <link> | Links to an external style sheet (or other document type). Used in the `<head>` section of the document Attributes href="url" | The address of the style sheet type="contenttype" | The Internet content type. (Always "text/css" for a CSS style sheet.) rel="stylesheet" | The relationship to a referenced document. (Always "stylesheet" for style sheets.) Tag <span>…</span> | Does nothing but provide a place to put style or other attributes. (Similar to `<div>…</div>` but does not cause a line break.) Attribute style="style" | Includes inline style specifications. (Can be used in `<span>` `<div>` `<body>` and most other HTML tags.)"
"SAMS: Chapter 2 Quiz 1. Which five tags does every HTML5 page require? 2. Which of the semantic elements discussed in this chapter is appropriate for containing the definition of a word used in an article? 3. Do you have to use an `<h1>`, `<h2>`, `<h3>`, `<h4>`, `<h5>`, or `<h6>` element within a `<header>` element? 4. How many different `<nav>` elements can you have in a single page? 5. How many different ways are there to ensure that style rules can be applied to your content? Answers 1. Every HTML page requires `<html>`, `<head>`, `<title>`, and `<body>` (along with their closing tags, `</html>`, `</head>`, `</title>`, and `</body>`, respectively), plus `<!DOCTYPE html>` on the very first line. 2. The `<aside>` element is appropriate for this situation. 3. No. The `<header>` element can contain any other flow content besides another `<header>` element or a `<footer>` element. However, a heading element (`<h1>` through `<h6>`) is not required in a `<header>` element. 4. You can have as many `<nav>` elements as you need. The trick is to “need” only a few (perhaps for primary and secondary navigation only); otherwise, the meaning is lost. 5. Three: externally, internally, and inline."